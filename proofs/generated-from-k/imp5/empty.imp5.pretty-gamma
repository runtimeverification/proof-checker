MetaVar 0eFresh, len=1 x0 

	Stack:
	0: phi0
EVar 0
	Stack:
	0: phi0
	1: x0
MetaVar 0
	Stack:
	0: phi0
	1: x0
	2: phi0
MetaVar 1
	Stack:
	0: phi0
	1: x0
	2: phi0
	3: phi1
MetaVar 0
	Stack:
	0: phi0
	1: x0
	2: phi0
	3: phi1
	4: phi0
MetaVar 1
	Stack:
	0: phi0
	1: x0
	2: phi0
	3: phi1
	4: phi0
	5: phi1
Implies
	Stack:
	0: phi0
	1: x0
	2: phi0
	3: phi1
	4: (phi0 -> phi1)
MetaVar 1
	Stack:
	0: phi0
	1: x0
	2: phi0
	3: phi1
	4: (phi0 -> phi1)
	5: phi1
MetaVar 0
	Stack:
	0: phi0
	1: x0
	2: phi0
	3: phi1
	4: (phi0 -> phi1)
	5: phi1
	6: phi0
Implies
	Stack:
	0: phi0
	1: x0
	2: phi0
	3: phi1
	4: (phi0 -> phi1)
	5: (phi1 -> phi0)
MetaVar 0
	Stack:
	0: phi0
	1: x0
	2: phi0
	3: phi1
	4: (phi0 -> phi1)
	5: (phi1 -> phi0)
	6: phi0
MetaVar 1
	Stack:
	0: phi0
	1: x0
	2: phi0
	3: phi1
	4: (phi0 -> phi1)
	5: (phi1 -> phi0)
	6: phi0
	7: phi1
MetaVar 0
	Stack:
	0: phi0
	1: x0
	2: phi0
	3: phi1
	4: (phi0 -> phi1)
	5: (phi1 -> phi0)
	6: phi0
	7: phi1
	8: phi0
SVar 0
	Stack:
	0: phi0
	1: x0
	2: phi0
	3: phi1
	4: (phi0 -> phi1)
	5: (phi1 -> phi0)
	6: phi0
	7: phi1
	8: phi0
	9: X0
Mu 0
	Stack:
	0: phi0
	1: x0
	2: phi0
	3: phi1
	4: (phi0 -> phi1)
	5: (phi1 -> phi0)
	6: phi0
	7: phi1
	8: phi0
	9: (μ X0 . X0)
Instantiate 
	Stack:
	0: phi0
	1: x0
	2: phi0
	3: phi1
	4: (phi0 -> phi1)
	5: (phi1 -> phi0)
	6: phi0
	7: phi1
	8: phi0
	9: ⊥
Implies
	Stack:
	0: phi0
	1: x0
	2: phi0
	3: phi1
	4: (phi0 -> phi1)
	5: (phi1 -> phi0)
	6: phi0
	7: phi1
	8: (phi0 -> ⊥)
Instantiate 0
	Stack:
	0: phi0
	1: x0
	2: phi0
	3: phi1
	4: (phi0 -> phi1)
	5: (phi1 -> phi0)
	6: phi0
	7: ¬phi1
Implies
	Stack:
	0: phi0
	1: x0
	2: phi0
	3: phi1
	4: (phi0 -> phi1)
	5: (phi1 -> phi0)
	6: (phi0 -> ¬phi1)
MetaVar 0
	Stack:
	0: phi0
	1: x0
	2: phi0
	3: phi1
	4: (phi0 -> phi1)
	5: (phi1 -> phi0)
	6: (phi0 -> ¬phi1)
	7: phi0
SVar 0
	Stack:
	0: phi0
	1: x0
	2: phi0
	3: phi1
	4: (phi0 -> phi1)
	5: (phi1 -> phi0)
	6: (phi0 -> ¬phi1)
	7: phi0
	8: X0
Mu 0
	Stack:
	0: phi0
	1: x0
	2: phi0
	3: phi1
	4: (phi0 -> phi1)
	5: (phi1 -> phi0)
	6: (phi0 -> ¬phi1)
	7: phi0
	8: (μ X0 . X0)
Instantiate 
	Stack:
	0: phi0
	1: x0
	2: phi0
	3: phi1
	4: (phi0 -> phi1)
	5: (phi1 -> phi0)
	6: (phi0 -> ¬phi1)
	7: phi0
	8: ⊥
Implies
	Stack:
	0: phi0
	1: x0
	2: phi0
	3: phi1
	4: (phi0 -> phi1)
	5: (phi1 -> phi0)
	6: (phi0 -> ¬phi1)
	7: (phi0 -> ⊥)
Instantiate 0
	Stack:
	0: phi0
	1: x0
	2: phi0
	3: phi1
	4: (phi0 -> phi1)
	5: (phi1 -> phi0)
	6: ¬(phi0 -> ¬phi1)
Instantiate 0, 1
	Stack:
	0: phi0
	1: x0
	2: phi0
	3: phi1
	4: ((phi0 -> phi1) ⋀ (phi1 -> phi0))
Instantiate 0, 1
	Stack:
	0: phi0
	1: x0
	2: (0 <-> 1)
MetaVar 0
	Stack:
	0: phi0
	1: x0
	2: (0 <-> 1)
	3: phi0
MetaVar 0
	Stack:
	0: phi0
	1: x0
	2: (0 <-> 1)
	3: phi0
	4: phi0
SVar 0
	Stack:
	0: phi0
	1: x0
	2: (0 <-> 1)
	3: phi0
	4: phi0
	5: X0
Mu 0
	Stack:
	0: phi0
	1: x0
	2: (0 <-> 1)
	3: phi0
	4: phi0
	5: (μ X0 . X0)
Instantiate 
	Stack:
	0: phi0
	1: x0
	2: (0 <-> 1)
	3: phi0
	4: phi0
	5: ⊥
Implies
	Stack:
	0: phi0
	1: x0
	2: (0 <-> 1)
	3: phi0
	4: (phi0 -> ⊥)
Instantiate 0
	Stack:
	0: phi0
	1: x0
	2: (0 <-> 1)
	3: ¬phi0
Symbol ⌈_⌉
	Stack:
	0: phi0
	1: x0
	2: (0 <-> 1)
	3: ¬phi0
	4: ⌈_⌉
MetaVar 0
	Stack:
	0: phi0
	1: x0
	2: (0 <-> 1)
	3: ¬phi0
	4: ⌈_⌉
	5: phi0
App
	Stack:
	0: phi0
	1: x0
	2: (0 <-> 1)
	3: ¬phi0
	4: (⌈_⌉ · phi0)
Instantiate 0
	Stack:
	0: phi0
	1: x0
	2: (0 <-> 1)
	3: ⌈ ¬phi0 ⌉
MetaVar 0
	Stack:
	0: phi0
	1: x0
	2: (0 <-> 1)
	3: ⌈ ¬phi0 ⌉
	4: phi0
SVar 0
	Stack:
	0: phi0
	1: x0
	2: (0 <-> 1)
	3: ⌈ ¬phi0 ⌉
	4: phi0
	5: X0
Mu 0
	Stack:
	0: phi0
	1: x0
	2: (0 <-> 1)
	3: ⌈ ¬phi0 ⌉
	4: phi0
	5: (μ X0 . X0)
Instantiate 
	Stack:
	0: phi0
	1: x0
	2: (0 <-> 1)
	3: ⌈ ¬phi0 ⌉
	4: phi0
	5: ⊥
Implies
	Stack:
	0: phi0
	1: x0
	2: (0 <-> 1)
	3: ⌈ ¬phi0 ⌉
	4: (phi0 -> ⊥)
Instantiate 0
	Stack:
	0: phi0
	1: x0
	2: (0 <-> 1)
	3: ¬⌈ ¬phi0 ⌉
Instantiate 0
	Stack:
	0: phi0
	1: x0
	2: ⌊ (0 <-> 1) ⌋
Instantiate 0, 1
	Stack:
	0: (phi0 = x0)
Exists 0
	Stack:
	0: (∃ x0 . (phi0 = x0))
MetaVar 1
	Stack:
	0: (∃ x0 . (phi0 = x0))
	1: phi1
MetaVar 0
	Stack:
	0: (∃ x0 . (phi0 = x0))
	1: phi1
	2: phi0
MetaVar 0
	Stack:
	0: (∃ x0 . (phi0 = x0))
	1: phi1
	2: phi0
	3: phi0
SVar 0
	Stack:
	0: (∃ x0 . (phi0 = x0))
	1: phi1
	2: phi0
	3: phi0
	4: X0
Mu 0
	Stack:
	0: (∃ x0 . (phi0 = x0))
	1: phi1
	2: phi0
	3: phi0
	4: (μ X0 . X0)
Instantiate 
	Stack:
	0: (∃ x0 . (phi0 = x0))
	1: phi1
	2: phi0
	3: phi0
	4: ⊥
Implies
	Stack:
	0: (∃ x0 . (phi0 = x0))
	1: phi1
	2: phi0
	3: (phi0 -> ⊥)
Instantiate 0
	Stack:
	0: (∃ x0 . (phi0 = x0))
	1: phi1
	2: ¬phi0
Exists 1
	Stack:
	0: (∃ x0 . (phi0 = x0))
	1: phi1
	2: (∃ x1 . ¬phi0)
MetaVar 0
	Stack:
	0: (∃ x0 . (phi0 = x0))
	1: phi1
	2: (∃ x1 . ¬phi0)
	3: phi0
SVar 0
	Stack:
	0: (∃ x0 . (phi0 = x0))
	1: phi1
	2: (∃ x1 . ¬phi0)
	3: phi0
	4: X0
Mu 0
	Stack:
	0: (∃ x0 . (phi0 = x0))
	1: phi1
	2: (∃ x1 . ¬phi0)
	3: phi0
	4: (μ X0 . X0)
Instantiate 
	Stack:
	0: (∃ x0 . (phi0 = x0))
	1: phi1
	2: (∃ x1 . ¬phi0)
	3: phi0
	4: ⊥
Implies
	Stack:
	0: (∃ x0 . (phi0 = x0))
	1: phi1
	2: (∃ x1 . ¬phi0)
	3: (phi0 -> ⊥)
Instantiate 0
	Stack:
	0: (∃ x0 . (phi0 = x0))
	1: phi1
	2: ¬(∃ x1 . ¬phi0)
Instantiate 0
	Stack:
	0: (∃ x0 . (phi0 = x0))
	1: (phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}]
MetaVar 0eFresh, len=1 x0 

	Stack:
	0: (∃ x0 . (phi0 = x0))
	1: (phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}]
	2: phi0
MetaVar 1
	Stack:
	0: (∃ x0 . (phi0 = x0))
	1: (phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}]
	2: phi0
	3: phi1
ESubst id=1
	Stack:
	0: (∃ x0 . (phi0 = x0))
	1: (phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}]
	2: phi1[phi0/x1]
Implies
	Stack:
	0: (∃ x0 . (phi0 = x0))
	1: ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1])
Implies
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
Publish
EVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: x0
Symbol ⌈_⌉
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: x0
	2: ⌈_⌉
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: x0
	2: ⌈_⌉
	3: phi0
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: x0
	2: (⌈_⌉ · phi0)
Instantiate 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
Publish
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: phi0
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: phi0
	3: phi1
MetaVar 2
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: phi0
	3: phi1
	4: phi2
Symbol kore_inj
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: phi0
	3: phi1
	4: phi2
	5: kore_inj
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: phi0
	3: phi1
	4: phi2
	5: kore_inj
	6: phi0
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: phi0
	3: phi1
	4: phi2
	5: (kore_inj · phi0)
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: phi0
	3: phi1
	4: phi2
	5: (kore_inj · phi0)
	6: phi1
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: phi0
	3: phi1
	4: phi2
	5: ((kore_inj · phi0) · phi1)
MetaVar 2
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: phi0
	3: phi1
	4: phi2
	5: ((kore_inj · phi0) · phi1)
	6: phi2
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: phi0
	3: phi1
	4: phi2
	5: (((kore_inj · phi0) · phi1) · phi2)
Instantiate 0, 1, 2
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: kore_inj(phi0, phi1, phi2)
MetaVar 2
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: kore_inj(phi0, phi1, phi2)
	3: phi2
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: kore_inj(phi0, phi1, phi2)
	3: phi2
	4: phi0
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: kore_inj(phi0, phi1, phi2)
	3: phi2
	4: phi0
	5: phi1
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: kore_inj(phi0, phi1, phi2)
	3: phi2
	4: phi0
	5: phi1
	6: phi0
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: kore_inj(phi0, phi1, phi2)
	3: phi2
	4: phi0
	5: phi1
	6: phi0
	7: phi1
Implies
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: kore_inj(phi0, phi1, phi2)
	3: phi2
	4: phi0
	5: phi1
	6: (phi0 -> phi1)
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: kore_inj(phi0, phi1, phi2)
	3: phi2
	4: phi0
	5: phi1
	6: (phi0 -> phi1)
	7: phi1
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: kore_inj(phi0, phi1, phi2)
	3: phi2
	4: phi0
	5: phi1
	6: (phi0 -> phi1)
	7: phi1
	8: phi0
Implies
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: kore_inj(phi0, phi1, phi2)
	3: phi2
	4: phi0
	5: phi1
	6: (phi0 -> phi1)
	7: (phi1 -> phi0)
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: kore_inj(phi0, phi1, phi2)
	3: phi2
	4: phi0
	5: phi1
	6: (phi0 -> phi1)
	7: (phi1 -> phi0)
	8: phi0
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: kore_inj(phi0, phi1, phi2)
	3: phi2
	4: phi0
	5: phi1
	6: (phi0 -> phi1)
	7: (phi1 -> phi0)
	8: phi0
	9: phi1
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: kore_inj(phi0, phi1, phi2)
	3: phi2
	4: phi0
	5: phi1
	6: (phi0 -> phi1)
	7: (phi1 -> phi0)
	8: phi0
	9: phi1
	10: phi0
SVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: kore_inj(phi0, phi1, phi2)
	3: phi2
	4: phi0
	5: phi1
	6: (phi0 -> phi1)
	7: (phi1 -> phi0)
	8: phi0
	9: phi1
	10: phi0
	11: X0
Mu 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: kore_inj(phi0, phi1, phi2)
	3: phi2
	4: phi0
	5: phi1
	6: (phi0 -> phi1)
	7: (phi1 -> phi0)
	8: phi0
	9: phi1
	10: phi0
	11: (μ X0 . X0)
Instantiate 
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: kore_inj(phi0, phi1, phi2)
	3: phi2
	4: phi0
	5: phi1
	6: (phi0 -> phi1)
	7: (phi1 -> phi0)
	8: phi0
	9: phi1
	10: phi0
	11: ⊥
Implies
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: kore_inj(phi0, phi1, phi2)
	3: phi2
	4: phi0
	5: phi1
	6: (phi0 -> phi1)
	7: (phi1 -> phi0)
	8: phi0
	9: phi1
	10: (phi0 -> ⊥)
Instantiate 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: kore_inj(phi0, phi1, phi2)
	3: phi2
	4: phi0
	5: phi1
	6: (phi0 -> phi1)
	7: (phi1 -> phi0)
	8: phi0
	9: ¬phi1
Implies
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: kore_inj(phi0, phi1, phi2)
	3: phi2
	4: phi0
	5: phi1
	6: (phi0 -> phi1)
	7: (phi1 -> phi0)
	8: (phi0 -> ¬phi1)
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: kore_inj(phi0, phi1, phi2)
	3: phi2
	4: phi0
	5: phi1
	6: (phi0 -> phi1)
	7: (phi1 -> phi0)
	8: (phi0 -> ¬phi1)
	9: phi0
SVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: kore_inj(phi0, phi1, phi2)
	3: phi2
	4: phi0
	5: phi1
	6: (phi0 -> phi1)
	7: (phi1 -> phi0)
	8: (phi0 -> ¬phi1)
	9: phi0
	10: X0
Mu 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: kore_inj(phi0, phi1, phi2)
	3: phi2
	4: phi0
	5: phi1
	6: (phi0 -> phi1)
	7: (phi1 -> phi0)
	8: (phi0 -> ¬phi1)
	9: phi0
	10: (μ X0 . X0)
Instantiate 
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: kore_inj(phi0, phi1, phi2)
	3: phi2
	4: phi0
	5: phi1
	6: (phi0 -> phi1)
	7: (phi1 -> phi0)
	8: (phi0 -> ¬phi1)
	9: phi0
	10: ⊥
Implies
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: kore_inj(phi0, phi1, phi2)
	3: phi2
	4: phi0
	5: phi1
	6: (phi0 -> phi1)
	7: (phi1 -> phi0)
	8: (phi0 -> ¬phi1)
	9: (phi0 -> ⊥)
Instantiate 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: kore_inj(phi0, phi1, phi2)
	3: phi2
	4: phi0
	5: phi1
	6: (phi0 -> phi1)
	7: (phi1 -> phi0)
	8: ¬(phi0 -> ¬phi1)
Instantiate 0, 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: kore_inj(phi0, phi1, phi2)
	3: phi2
	4: phi0
	5: phi1
	6: ((phi0 -> phi1) ⋀ (phi1 -> phi0))
Instantiate 0, 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: kore_inj(phi0, phi1, phi2)
	3: phi2
	4: (0 <-> 1)
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: kore_inj(phi0, phi1, phi2)
	3: phi2
	4: (0 <-> 1)
	5: phi0
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: kore_inj(phi0, phi1, phi2)
	3: phi2
	4: (0 <-> 1)
	5: phi0
	6: phi0
SVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: kore_inj(phi0, phi1, phi2)
	3: phi2
	4: (0 <-> 1)
	5: phi0
	6: phi0
	7: X0
Mu 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: kore_inj(phi0, phi1, phi2)
	3: phi2
	4: (0 <-> 1)
	5: phi0
	6: phi0
	7: (μ X0 . X0)
Instantiate 
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: kore_inj(phi0, phi1, phi2)
	3: phi2
	4: (0 <-> 1)
	5: phi0
	6: phi0
	7: ⊥
Implies
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: kore_inj(phi0, phi1, phi2)
	3: phi2
	4: (0 <-> 1)
	5: phi0
	6: (phi0 -> ⊥)
Instantiate 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: kore_inj(phi0, phi1, phi2)
	3: phi2
	4: (0 <-> 1)
	5: ¬phi0
Symbol ⌈_⌉
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: kore_inj(phi0, phi1, phi2)
	3: phi2
	4: (0 <-> 1)
	5: ¬phi0
	6: ⌈_⌉
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: kore_inj(phi0, phi1, phi2)
	3: phi2
	4: (0 <-> 1)
	5: ¬phi0
	6: ⌈_⌉
	7: phi0
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: kore_inj(phi0, phi1, phi2)
	3: phi2
	4: (0 <-> 1)
	5: ¬phi0
	6: (⌈_⌉ · phi0)
Instantiate 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: kore_inj(phi0, phi1, phi2)
	3: phi2
	4: (0 <-> 1)
	5: ⌈ ¬phi0 ⌉
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: kore_inj(phi0, phi1, phi2)
	3: phi2
	4: (0 <-> 1)
	5: ⌈ ¬phi0 ⌉
	6: phi0
SVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: kore_inj(phi0, phi1, phi2)
	3: phi2
	4: (0 <-> 1)
	5: ⌈ ¬phi0 ⌉
	6: phi0
	7: X0
Mu 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: kore_inj(phi0, phi1, phi2)
	3: phi2
	4: (0 <-> 1)
	5: ⌈ ¬phi0 ⌉
	6: phi0
	7: (μ X0 . X0)
Instantiate 
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: kore_inj(phi0, phi1, phi2)
	3: phi2
	4: (0 <-> 1)
	5: ⌈ ¬phi0 ⌉
	6: phi0
	7: ⊥
Implies
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: kore_inj(phi0, phi1, phi2)
	3: phi2
	4: (0 <-> 1)
	5: ⌈ ¬phi0 ⌉
	6: (phi0 -> ⊥)
Instantiate 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: kore_inj(phi0, phi1, phi2)
	3: phi2
	4: (0 <-> 1)
	5: ¬⌈ ¬phi0 ⌉
Instantiate 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: kore_inj(phi0, phi1, phi2)
	3: phi2
	4: ⌊ (0 <-> 1) ⌋
Instantiate 0, 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
Publish
Symbol ksort_SortInt
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: ksort_SortInt
Symbol 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: ksort_SortInt
	4: 0
Symbol kore_dv
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: ksort_SortInt
	4: 0
	5: kore_dv
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: ksort_SortInt
	4: 0
	5: kore_dv
	6: phi0
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: ksort_SortInt
	4: 0
	5: (kore_dv · phi0)
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: ksort_SortInt
	4: 0
	5: (kore_dv · phi0)
	6: phi1
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: ksort_SortInt
	4: 0
	5: ((kore_dv · phi0) · phi1)
Instantiate 0, 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: dv(0):ksort_SortInt
Symbol kore_Lbl'-LT-'generatedCounter'-GT-'
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: dv(0):ksort_SortInt
	4: kore_Lbl'-LT-'generatedCounter'-GT-'
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: dv(0):ksort_SortInt
	4: kore_Lbl'-LT-'generatedCounter'-GT-'
	5: phi0
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: dv(0):ksort_SortInt
	4: (kore_Lbl'-LT-'generatedCounter'-GT-' · phi0)
Instantiate 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
EVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	4: x0
MetaVar 0eFresh, len=1 x0 

	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	4: x0
	5: phi0
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	4: x0
	5: phi0
	6: phi0
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	4: x0
	5: phi0
	6: phi0
	7: phi1
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	4: x0
	5: phi0
	6: phi0
	7: phi1
	8: phi0
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	4: x0
	5: phi0
	6: phi0
	7: phi1
	8: phi0
	9: phi1
Implies
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	4: x0
	5: phi0
	6: phi0
	7: phi1
	8: (phi0 -> phi1)
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	4: x0
	5: phi0
	6: phi0
	7: phi1
	8: (phi0 -> phi1)
	9: phi1
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	4: x0
	5: phi0
	6: phi0
	7: phi1
	8: (phi0 -> phi1)
	9: phi1
	10: phi0
Implies
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	4: x0
	5: phi0
	6: phi0
	7: phi1
	8: (phi0 -> phi1)
	9: (phi1 -> phi0)
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	4: x0
	5: phi0
	6: phi0
	7: phi1
	8: (phi0 -> phi1)
	9: (phi1 -> phi0)
	10: phi0
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	4: x0
	5: phi0
	6: phi0
	7: phi1
	8: (phi0 -> phi1)
	9: (phi1 -> phi0)
	10: phi0
	11: phi1
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	4: x0
	5: phi0
	6: phi0
	7: phi1
	8: (phi0 -> phi1)
	9: (phi1 -> phi0)
	10: phi0
	11: phi1
	12: phi0
SVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	4: x0
	5: phi0
	6: phi0
	7: phi1
	8: (phi0 -> phi1)
	9: (phi1 -> phi0)
	10: phi0
	11: phi1
	12: phi0
	13: X0
Mu 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	4: x0
	5: phi0
	6: phi0
	7: phi1
	8: (phi0 -> phi1)
	9: (phi1 -> phi0)
	10: phi0
	11: phi1
	12: phi0
	13: (μ X0 . X0)
Instantiate 
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	4: x0
	5: phi0
	6: phi0
	7: phi1
	8: (phi0 -> phi1)
	9: (phi1 -> phi0)
	10: phi0
	11: phi1
	12: phi0
	13: ⊥
Implies
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	4: x0
	5: phi0
	6: phi0
	7: phi1
	8: (phi0 -> phi1)
	9: (phi1 -> phi0)
	10: phi0
	11: phi1
	12: (phi0 -> ⊥)
Instantiate 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	4: x0
	5: phi0
	6: phi0
	7: phi1
	8: (phi0 -> phi1)
	9: (phi1 -> phi0)
	10: phi0
	11: ¬phi1
Implies
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	4: x0
	5: phi0
	6: phi0
	7: phi1
	8: (phi0 -> phi1)
	9: (phi1 -> phi0)
	10: (phi0 -> ¬phi1)
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	4: x0
	5: phi0
	6: phi0
	7: phi1
	8: (phi0 -> phi1)
	9: (phi1 -> phi0)
	10: (phi0 -> ¬phi1)
	11: phi0
SVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	4: x0
	5: phi0
	6: phi0
	7: phi1
	8: (phi0 -> phi1)
	9: (phi1 -> phi0)
	10: (phi0 -> ¬phi1)
	11: phi0
	12: X0
Mu 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	4: x0
	5: phi0
	6: phi0
	7: phi1
	8: (phi0 -> phi1)
	9: (phi1 -> phi0)
	10: (phi0 -> ¬phi1)
	11: phi0
	12: (μ X0 . X0)
Instantiate 
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	4: x0
	5: phi0
	6: phi0
	7: phi1
	8: (phi0 -> phi1)
	9: (phi1 -> phi0)
	10: (phi0 -> ¬phi1)
	11: phi0
	12: ⊥
Implies
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	4: x0
	5: phi0
	6: phi0
	7: phi1
	8: (phi0 -> phi1)
	9: (phi1 -> phi0)
	10: (phi0 -> ¬phi1)
	11: (phi0 -> ⊥)
Instantiate 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	4: x0
	5: phi0
	6: phi0
	7: phi1
	8: (phi0 -> phi1)
	9: (phi1 -> phi0)
	10: ¬(phi0 -> ¬phi1)
Instantiate 0, 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	4: x0
	5: phi0
	6: phi0
	7: phi1
	8: ((phi0 -> phi1) ⋀ (phi1 -> phi0))
Instantiate 0, 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	4: x0
	5: phi0
	6: (0 <-> 1)
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	4: x0
	5: phi0
	6: (0 <-> 1)
	7: phi0
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	4: x0
	5: phi0
	6: (0 <-> 1)
	7: phi0
	8: phi0
SVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	4: x0
	5: phi0
	6: (0 <-> 1)
	7: phi0
	8: phi0
	9: X0
Mu 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	4: x0
	5: phi0
	6: (0 <-> 1)
	7: phi0
	8: phi0
	9: (μ X0 . X0)
Instantiate 
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	4: x0
	5: phi0
	6: (0 <-> 1)
	7: phi0
	8: phi0
	9: ⊥
Implies
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	4: x0
	5: phi0
	6: (0 <-> 1)
	7: phi0
	8: (phi0 -> ⊥)
Instantiate 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	4: x0
	5: phi0
	6: (0 <-> 1)
	7: ¬phi0
Symbol ⌈_⌉
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	4: x0
	5: phi0
	6: (0 <-> 1)
	7: ¬phi0
	8: ⌈_⌉
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	4: x0
	5: phi0
	6: (0 <-> 1)
	7: ¬phi0
	8: ⌈_⌉
	9: phi0
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	4: x0
	5: phi0
	6: (0 <-> 1)
	7: ¬phi0
	8: (⌈_⌉ · phi0)
Instantiate 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	4: x0
	5: phi0
	6: (0 <-> 1)
	7: ⌈ ¬phi0 ⌉
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	4: x0
	5: phi0
	6: (0 <-> 1)
	7: ⌈ ¬phi0 ⌉
	8: phi0
SVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	4: x0
	5: phi0
	6: (0 <-> 1)
	7: ⌈ ¬phi0 ⌉
	8: phi0
	9: X0
Mu 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	4: x0
	5: phi0
	6: (0 <-> 1)
	7: ⌈ ¬phi0 ⌉
	8: phi0
	9: (μ X0 . X0)
Instantiate 
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	4: x0
	5: phi0
	6: (0 <-> 1)
	7: ⌈ ¬phi0 ⌉
	8: phi0
	9: ⊥
Implies
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	4: x0
	5: phi0
	6: (0 <-> 1)
	7: ⌈ ¬phi0 ⌉
	8: (phi0 -> ⊥)
Instantiate 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	4: x0
	5: phi0
	6: (0 <-> 1)
	7: ¬⌈ ¬phi0 ⌉
Instantiate 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	4: x0
	5: phi0
	6: ⌊ (0 <-> 1) ⌋
Instantiate 0, 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	4: (x0 = phi0)
Exists 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	4: (∃ x0 . (x0 = phi0))
Instantiate 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
Publish
Symbol ksort_SortInt
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: ksort_SortInt
Symbol 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: ksort_SortInt
	5: 0
Symbol kore_dv
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: ksort_SortInt
	5: 0
	6: kore_dv
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: ksort_SortInt
	5: 0
	6: kore_dv
	7: phi0
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: ksort_SortInt
	5: 0
	6: (kore_dv · phi0)
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: ksort_SortInt
	5: 0
	6: (kore_dv · phi0)
	7: phi1
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: ksort_SortInt
	5: 0
	6: ((kore_dv · phi0) · phi1)
Instantiate 0, 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: dv(0):ksort_SortInt
Symbol ksort_SortInt
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: dv(0):ksort_SortInt
	5: ksort_SortInt
Symbol 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: dv(0):ksort_SortInt
	5: ksort_SortInt
	6: 0
Symbol kore_dv
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: dv(0):ksort_SortInt
	5: ksort_SortInt
	6: 0
	7: kore_dv
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: dv(0):ksort_SortInt
	5: ksort_SortInt
	6: 0
	7: kore_dv
	8: phi0
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: dv(0):ksort_SortInt
	5: ksort_SortInt
	6: 0
	7: (kore_dv · phi0)
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: dv(0):ksort_SortInt
	5: ksort_SortInt
	6: 0
	7: (kore_dv · phi0)
	8: phi1
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: dv(0):ksort_SortInt
	5: ksort_SortInt
	6: 0
	7: ((kore_dv · phi0) · phi1)
Instantiate 0, 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: dv(0):ksort_SortInt
	5: dv(0):ksort_SortInt
Symbol ksort_SortInt
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: dv(0):ksort_SortInt
	5: dv(0):ksort_SortInt
	6: ksort_SortInt
Symbol 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: dv(0):ksort_SortInt
	5: dv(0):ksort_SortInt
	6: ksort_SortInt
	7: 0
Symbol kore_dv
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: dv(0):ksort_SortInt
	5: dv(0):ksort_SortInt
	6: ksort_SortInt
	7: 0
	8: kore_dv
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: dv(0):ksort_SortInt
	5: dv(0):ksort_SortInt
	6: ksort_SortInt
	7: 0
	8: kore_dv
	9: phi0
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: dv(0):ksort_SortInt
	5: dv(0):ksort_SortInt
	6: ksort_SortInt
	7: 0
	8: (kore_dv · phi0)
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: dv(0):ksort_SortInt
	5: dv(0):ksort_SortInt
	6: ksort_SortInt
	7: 0
	8: (kore_dv · phi0)
	9: phi1
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: dv(0):ksort_SortInt
	5: dv(0):ksort_SortInt
	6: ksort_SortInt
	7: 0
	8: ((kore_dv · phi0) · phi1)
Instantiate 0, 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: dv(0):ksort_SortInt
	5: dv(0):ksort_SortInt
	6: dv(0):ksort_SortInt
Symbol ksort_SortInt
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: dv(0):ksort_SortInt
	5: dv(0):ksort_SortInt
	6: dv(0):ksort_SortInt
	7: ksort_SortInt
Symbol 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: dv(0):ksort_SortInt
	5: dv(0):ksort_SortInt
	6: dv(0):ksort_SortInt
	7: ksort_SortInt
	8: 0
Symbol kore_dv
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: dv(0):ksort_SortInt
	5: dv(0):ksort_SortInt
	6: dv(0):ksort_SortInt
	7: ksort_SortInt
	8: 0
	9: kore_dv
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: dv(0):ksort_SortInt
	5: dv(0):ksort_SortInt
	6: dv(0):ksort_SortInt
	7: ksort_SortInt
	8: 0
	9: kore_dv
	10: phi0
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: dv(0):ksort_SortInt
	5: dv(0):ksort_SortInt
	6: dv(0):ksort_SortInt
	7: ksort_SortInt
	8: 0
	9: (kore_dv · phi0)
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: dv(0):ksort_SortInt
	5: dv(0):ksort_SortInt
	6: dv(0):ksort_SortInt
	7: ksort_SortInt
	8: 0
	9: (kore_dv · phi0)
	10: phi1
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: dv(0):ksort_SortInt
	5: dv(0):ksort_SortInt
	6: dv(0):ksort_SortInt
	7: ksort_SortInt
	8: 0
	9: ((kore_dv · phi0) · phi1)
Instantiate 0, 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: dv(0):ksort_SortInt
	5: dv(0):ksort_SortInt
	6: dv(0):ksort_SortInt
	7: dv(0):ksort_SortInt
Symbol ksort_SortInt
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: dv(0):ksort_SortInt
	5: dv(0):ksort_SortInt
	6: dv(0):ksort_SortInt
	7: dv(0):ksort_SortInt
	8: ksort_SortInt
Symbol 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: dv(0):ksort_SortInt
	5: dv(0):ksort_SortInt
	6: dv(0):ksort_SortInt
	7: dv(0):ksort_SortInt
	8: ksort_SortInt
	9: 0
Symbol kore_dv
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: dv(0):ksort_SortInt
	5: dv(0):ksort_SortInt
	6: dv(0):ksort_SortInt
	7: dv(0):ksort_SortInt
	8: ksort_SortInt
	9: 0
	10: kore_dv
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: dv(0):ksort_SortInt
	5: dv(0):ksort_SortInt
	6: dv(0):ksort_SortInt
	7: dv(0):ksort_SortInt
	8: ksort_SortInt
	9: 0
	10: kore_dv
	11: phi0
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: dv(0):ksort_SortInt
	5: dv(0):ksort_SortInt
	6: dv(0):ksort_SortInt
	7: dv(0):ksort_SortInt
	8: ksort_SortInt
	9: 0
	10: (kore_dv · phi0)
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: dv(0):ksort_SortInt
	5: dv(0):ksort_SortInt
	6: dv(0):ksort_SortInt
	7: dv(0):ksort_SortInt
	8: ksort_SortInt
	9: 0
	10: (kore_dv · phi0)
	11: phi1
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: dv(0):ksort_SortInt
	5: dv(0):ksort_SortInt
	6: dv(0):ksort_SortInt
	7: dv(0):ksort_SortInt
	8: ksort_SortInt
	9: 0
	10: ((kore_dv · phi0) · phi1)
Instantiate 0, 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: dv(0):ksort_SortInt
	5: dv(0):ksort_SortInt
	6: dv(0):ksort_SortInt
	7: dv(0):ksort_SortInt
	8: dv(0):ksort_SortInt
Symbol ksort_SortInt
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: dv(0):ksort_SortInt
	5: dv(0):ksort_SortInt
	6: dv(0):ksort_SortInt
	7: dv(0):ksort_SortInt
	8: dv(0):ksort_SortInt
	9: ksort_SortInt
Symbol 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: dv(0):ksort_SortInt
	5: dv(0):ksort_SortInt
	6: dv(0):ksort_SortInt
	7: dv(0):ksort_SortInt
	8: dv(0):ksort_SortInt
	9: ksort_SortInt
	10: 0
Symbol kore_dv
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: dv(0):ksort_SortInt
	5: dv(0):ksort_SortInt
	6: dv(0):ksort_SortInt
	7: dv(0):ksort_SortInt
	8: dv(0):ksort_SortInt
	9: ksort_SortInt
	10: 0
	11: kore_dv
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: dv(0):ksort_SortInt
	5: dv(0):ksort_SortInt
	6: dv(0):ksort_SortInt
	7: dv(0):ksort_SortInt
	8: dv(0):ksort_SortInt
	9: ksort_SortInt
	10: 0
	11: kore_dv
	12: phi0
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: dv(0):ksort_SortInt
	5: dv(0):ksort_SortInt
	6: dv(0):ksort_SortInt
	7: dv(0):ksort_SortInt
	8: dv(0):ksort_SortInt
	9: ksort_SortInt
	10: 0
	11: (kore_dv · phi0)
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: dv(0):ksort_SortInt
	5: dv(0):ksort_SortInt
	6: dv(0):ksort_SortInt
	7: dv(0):ksort_SortInt
	8: dv(0):ksort_SortInt
	9: ksort_SortInt
	10: 0
	11: (kore_dv · phi0)
	12: phi1
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: dv(0):ksort_SortInt
	5: dv(0):ksort_SortInt
	6: dv(0):ksort_SortInt
	7: dv(0):ksort_SortInt
	8: dv(0):ksort_SortInt
	9: ksort_SortInt
	10: 0
	11: ((kore_dv · phi0) · phi1)
Instantiate 0, 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: dv(0):ksort_SortInt
	5: dv(0):ksort_SortInt
	6: dv(0):ksort_SortInt
	7: dv(0):ksort_SortInt
	8: dv(0):ksort_SortInt
	9: dv(0):ksort_SortInt
Symbol kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: dv(0):ksort_SortInt
	5: dv(0):ksort_SortInt
	6: dv(0):ksort_SortInt
	7: dv(0):ksort_SortInt
	8: dv(0):ksort_SortInt
	9: dv(0):ksort_SortInt
	10: kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: dv(0):ksort_SortInt
	5: dv(0):ksort_SortInt
	6: dv(0):ksort_SortInt
	7: dv(0):ksort_SortInt
	8: dv(0):ksort_SortInt
	9: dv(0):ksort_SortInt
	10: kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int
	11: phi0
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: dv(0):ksort_SortInt
	5: dv(0):ksort_SortInt
	6: dv(0):ksort_SortInt
	7: dv(0):ksort_SortInt
	8: dv(0):ksort_SortInt
	9: dv(0):ksort_SortInt
	10: (kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int · phi0)
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: dv(0):ksort_SortInt
	5: dv(0):ksort_SortInt
	6: dv(0):ksort_SortInt
	7: dv(0):ksort_SortInt
	8: dv(0):ksort_SortInt
	9: dv(0):ksort_SortInt
	10: (kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int · phi0)
	11: phi1
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: dv(0):ksort_SortInt
	5: dv(0):ksort_SortInt
	6: dv(0):ksort_SortInt
	7: dv(0):ksort_SortInt
	8: dv(0):ksort_SortInt
	9: dv(0):ksort_SortInt
	10: ((kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int · phi0) · phi1)
MetaVar 2
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: dv(0):ksort_SortInt
	5: dv(0):ksort_SortInt
	6: dv(0):ksort_SortInt
	7: dv(0):ksort_SortInt
	8: dv(0):ksort_SortInt
	9: dv(0):ksort_SortInt
	10: ((kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int · phi0) · phi1)
	11: phi2
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: dv(0):ksort_SortInt
	5: dv(0):ksort_SortInt
	6: dv(0):ksort_SortInt
	7: dv(0):ksort_SortInt
	8: dv(0):ksort_SortInt
	9: dv(0):ksort_SortInt
	10: (((kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int · phi0) · phi1) · phi2)
MetaVar 3
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: dv(0):ksort_SortInt
	5: dv(0):ksort_SortInt
	6: dv(0):ksort_SortInt
	7: dv(0):ksort_SortInt
	8: dv(0):ksort_SortInt
	9: dv(0):ksort_SortInt
	10: (((kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int · phi0) · phi1) · phi2)
	11: phi3
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: dv(0):ksort_SortInt
	5: dv(0):ksort_SortInt
	6: dv(0):ksort_SortInt
	7: dv(0):ksort_SortInt
	8: dv(0):ksort_SortInt
	9: dv(0):ksort_SortInt
	10: ((((kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int · phi0) · phi1) · phi2) · phi3)
MetaVar 4
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: dv(0):ksort_SortInt
	5: dv(0):ksort_SortInt
	6: dv(0):ksort_SortInt
	7: dv(0):ksort_SortInt
	8: dv(0):ksort_SortInt
	9: dv(0):ksort_SortInt
	10: ((((kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int · phi0) · phi1) · phi2) · phi3)
	11: phi4
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: dv(0):ksort_SortInt
	5: dv(0):ksort_SortInt
	6: dv(0):ksort_SortInt
	7: dv(0):ksort_SortInt
	8: dv(0):ksort_SortInt
	9: dv(0):ksort_SortInt
	10: (((((kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int · phi0) · phi1) · phi2) · phi3) · phi4)
MetaVar 5
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: dv(0):ksort_SortInt
	5: dv(0):ksort_SortInt
	6: dv(0):ksort_SortInt
	7: dv(0):ksort_SortInt
	8: dv(0):ksort_SortInt
	9: dv(0):ksort_SortInt
	10: (((((kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int · phi0) · phi1) · phi2) · phi3) · phi4)
	11: phi5
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: dv(0):ksort_SortInt
	5: dv(0):ksort_SortInt
	6: dv(0):ksort_SortInt
	7: dv(0):ksort_SortInt
	8: dv(0):ksort_SortInt
	9: dv(0):ksort_SortInt
	10: ((((((kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int · phi0) · phi1) · phi2) · phi3) · phi4) · phi5)
Instantiate 0, 1, 2, 3, 4, 5
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt)
Symbol kore_Lbl'-LT-'s'-GT-'
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt)
	5: kore_Lbl'-LT-'s'-GT-'
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt)
	5: kore_Lbl'-LT-'s'-GT-'
	6: phi0
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt)
	5: (kore_Lbl'-LT-'s'-GT-' · phi0)
Instantiate 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: <kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>
EVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: <kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>
	5: x0
MetaVar 0eFresh, len=1 x0 

	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: <kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>
	5: x0
	6: phi0
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: <kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>
	5: x0
	6: phi0
	7: phi0
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: <kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>
	5: x0
	6: phi0
	7: phi0
	8: phi1
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: <kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>
	5: x0
	6: phi0
	7: phi0
	8: phi1
	9: phi0
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: <kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>
	5: x0
	6: phi0
	7: phi0
	8: phi1
	9: phi0
	10: phi1
Implies
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: <kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>
	5: x0
	6: phi0
	7: phi0
	8: phi1
	9: (phi0 -> phi1)
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: <kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>
	5: x0
	6: phi0
	7: phi0
	8: phi1
	9: (phi0 -> phi1)
	10: phi1
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: <kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>
	5: x0
	6: phi0
	7: phi0
	8: phi1
	9: (phi0 -> phi1)
	10: phi1
	11: phi0
Implies
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: <kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>
	5: x0
	6: phi0
	7: phi0
	8: phi1
	9: (phi0 -> phi1)
	10: (phi1 -> phi0)
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: <kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>
	5: x0
	6: phi0
	7: phi0
	8: phi1
	9: (phi0 -> phi1)
	10: (phi1 -> phi0)
	11: phi0
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: <kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>
	5: x0
	6: phi0
	7: phi0
	8: phi1
	9: (phi0 -> phi1)
	10: (phi1 -> phi0)
	11: phi0
	12: phi1
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: <kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>
	5: x0
	6: phi0
	7: phi0
	8: phi1
	9: (phi0 -> phi1)
	10: (phi1 -> phi0)
	11: phi0
	12: phi1
	13: phi0
SVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: <kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>
	5: x0
	6: phi0
	7: phi0
	8: phi1
	9: (phi0 -> phi1)
	10: (phi1 -> phi0)
	11: phi0
	12: phi1
	13: phi0
	14: X0
Mu 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: <kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>
	5: x0
	6: phi0
	7: phi0
	8: phi1
	9: (phi0 -> phi1)
	10: (phi1 -> phi0)
	11: phi0
	12: phi1
	13: phi0
	14: (μ X0 . X0)
Instantiate 
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: <kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>
	5: x0
	6: phi0
	7: phi0
	8: phi1
	9: (phi0 -> phi1)
	10: (phi1 -> phi0)
	11: phi0
	12: phi1
	13: phi0
	14: ⊥
Implies
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: <kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>
	5: x0
	6: phi0
	7: phi0
	8: phi1
	9: (phi0 -> phi1)
	10: (phi1 -> phi0)
	11: phi0
	12: phi1
	13: (phi0 -> ⊥)
Instantiate 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: <kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>
	5: x0
	6: phi0
	7: phi0
	8: phi1
	9: (phi0 -> phi1)
	10: (phi1 -> phi0)
	11: phi0
	12: ¬phi1
Implies
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: <kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>
	5: x0
	6: phi0
	7: phi0
	8: phi1
	9: (phi0 -> phi1)
	10: (phi1 -> phi0)
	11: (phi0 -> ¬phi1)
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: <kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>
	5: x0
	6: phi0
	7: phi0
	8: phi1
	9: (phi0 -> phi1)
	10: (phi1 -> phi0)
	11: (phi0 -> ¬phi1)
	12: phi0
SVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: <kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>
	5: x0
	6: phi0
	7: phi0
	8: phi1
	9: (phi0 -> phi1)
	10: (phi1 -> phi0)
	11: (phi0 -> ¬phi1)
	12: phi0
	13: X0
Mu 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: <kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>
	5: x0
	6: phi0
	7: phi0
	8: phi1
	9: (phi0 -> phi1)
	10: (phi1 -> phi0)
	11: (phi0 -> ¬phi1)
	12: phi0
	13: (μ X0 . X0)
Instantiate 
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: <kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>
	5: x0
	6: phi0
	7: phi0
	8: phi1
	9: (phi0 -> phi1)
	10: (phi1 -> phi0)
	11: (phi0 -> ¬phi1)
	12: phi0
	13: ⊥
Implies
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: <kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>
	5: x0
	6: phi0
	7: phi0
	8: phi1
	9: (phi0 -> phi1)
	10: (phi1 -> phi0)
	11: (phi0 -> ¬phi1)
	12: (phi0 -> ⊥)
Instantiate 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: <kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>
	5: x0
	6: phi0
	7: phi0
	8: phi1
	9: (phi0 -> phi1)
	10: (phi1 -> phi0)
	11: ¬(phi0 -> ¬phi1)
Instantiate 0, 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: <kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>
	5: x0
	6: phi0
	7: phi0
	8: phi1
	9: ((phi0 -> phi1) ⋀ (phi1 -> phi0))
Instantiate 0, 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: <kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>
	5: x0
	6: phi0
	7: (0 <-> 1)
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: <kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>
	5: x0
	6: phi0
	7: (0 <-> 1)
	8: phi0
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: <kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>
	5: x0
	6: phi0
	7: (0 <-> 1)
	8: phi0
	9: phi0
SVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: <kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>
	5: x0
	6: phi0
	7: (0 <-> 1)
	8: phi0
	9: phi0
	10: X0
Mu 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: <kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>
	5: x0
	6: phi0
	7: (0 <-> 1)
	8: phi0
	9: phi0
	10: (μ X0 . X0)
Instantiate 
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: <kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>
	5: x0
	6: phi0
	7: (0 <-> 1)
	8: phi0
	9: phi0
	10: ⊥
Implies
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: <kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>
	5: x0
	6: phi0
	7: (0 <-> 1)
	8: phi0
	9: (phi0 -> ⊥)
Instantiate 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: <kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>
	5: x0
	6: phi0
	7: (0 <-> 1)
	8: ¬phi0
Symbol ⌈_⌉
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: <kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>
	5: x0
	6: phi0
	7: (0 <-> 1)
	8: ¬phi0
	9: ⌈_⌉
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: <kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>
	5: x0
	6: phi0
	7: (0 <-> 1)
	8: ¬phi0
	9: ⌈_⌉
	10: phi0
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: <kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>
	5: x0
	6: phi0
	7: (0 <-> 1)
	8: ¬phi0
	9: (⌈_⌉ · phi0)
Instantiate 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: <kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>
	5: x0
	6: phi0
	7: (0 <-> 1)
	8: ⌈ ¬phi0 ⌉
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: <kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>
	5: x0
	6: phi0
	7: (0 <-> 1)
	8: ⌈ ¬phi0 ⌉
	9: phi0
SVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: <kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>
	5: x0
	6: phi0
	7: (0 <-> 1)
	8: ⌈ ¬phi0 ⌉
	9: phi0
	10: X0
Mu 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: <kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>
	5: x0
	6: phi0
	7: (0 <-> 1)
	8: ⌈ ¬phi0 ⌉
	9: phi0
	10: (μ X0 . X0)
Instantiate 
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: <kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>
	5: x0
	6: phi0
	7: (0 <-> 1)
	8: ⌈ ¬phi0 ⌉
	9: phi0
	10: ⊥
Implies
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: <kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>
	5: x0
	6: phi0
	7: (0 <-> 1)
	8: ⌈ ¬phi0 ⌉
	9: (phi0 -> ⊥)
Instantiate 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: <kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>
	5: x0
	6: phi0
	7: (0 <-> 1)
	8: ¬⌈ ¬phi0 ⌉
Instantiate 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: <kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>
	5: x0
	6: phi0
	7: ⌊ (0 <-> 1) ⌋
Instantiate 0, 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: <kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>
	5: (x0 = phi0)
Exists 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: <kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>
	5: (∃ x0 . (x0 = phi0))
Instantiate 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
Publish
Symbol kore_dotk
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: kore_dotk
Instantiate 
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: kore_dotk()
EVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: kore_dotk()
	6: x0
MetaVar 0eFresh, len=1 x0 

	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: kore_dotk()
	6: x0
	7: phi0
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: kore_dotk()
	6: x0
	7: phi0
	8: phi0
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: kore_dotk()
	6: x0
	7: phi0
	8: phi0
	9: phi1
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: kore_dotk()
	6: x0
	7: phi0
	8: phi0
	9: phi1
	10: phi0
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: kore_dotk()
	6: x0
	7: phi0
	8: phi0
	9: phi1
	10: phi0
	11: phi1
Implies
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: kore_dotk()
	6: x0
	7: phi0
	8: phi0
	9: phi1
	10: (phi0 -> phi1)
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: kore_dotk()
	6: x0
	7: phi0
	8: phi0
	9: phi1
	10: (phi0 -> phi1)
	11: phi1
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: kore_dotk()
	6: x0
	7: phi0
	8: phi0
	9: phi1
	10: (phi0 -> phi1)
	11: phi1
	12: phi0
Implies
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: kore_dotk()
	6: x0
	7: phi0
	8: phi0
	9: phi1
	10: (phi0 -> phi1)
	11: (phi1 -> phi0)
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: kore_dotk()
	6: x0
	7: phi0
	8: phi0
	9: phi1
	10: (phi0 -> phi1)
	11: (phi1 -> phi0)
	12: phi0
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: kore_dotk()
	6: x0
	7: phi0
	8: phi0
	9: phi1
	10: (phi0 -> phi1)
	11: (phi1 -> phi0)
	12: phi0
	13: phi1
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: kore_dotk()
	6: x0
	7: phi0
	8: phi0
	9: phi1
	10: (phi0 -> phi1)
	11: (phi1 -> phi0)
	12: phi0
	13: phi1
	14: phi0
SVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: kore_dotk()
	6: x0
	7: phi0
	8: phi0
	9: phi1
	10: (phi0 -> phi1)
	11: (phi1 -> phi0)
	12: phi0
	13: phi1
	14: phi0
	15: X0
Mu 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: kore_dotk()
	6: x0
	7: phi0
	8: phi0
	9: phi1
	10: (phi0 -> phi1)
	11: (phi1 -> phi0)
	12: phi0
	13: phi1
	14: phi0
	15: (μ X0 . X0)
Instantiate 
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: kore_dotk()
	6: x0
	7: phi0
	8: phi0
	9: phi1
	10: (phi0 -> phi1)
	11: (phi1 -> phi0)
	12: phi0
	13: phi1
	14: phi0
	15: ⊥
Implies
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: kore_dotk()
	6: x0
	7: phi0
	8: phi0
	9: phi1
	10: (phi0 -> phi1)
	11: (phi1 -> phi0)
	12: phi0
	13: phi1
	14: (phi0 -> ⊥)
Instantiate 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: kore_dotk()
	6: x0
	7: phi0
	8: phi0
	9: phi1
	10: (phi0 -> phi1)
	11: (phi1 -> phi0)
	12: phi0
	13: ¬phi1
Implies
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: kore_dotk()
	6: x0
	7: phi0
	8: phi0
	9: phi1
	10: (phi0 -> phi1)
	11: (phi1 -> phi0)
	12: (phi0 -> ¬phi1)
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: kore_dotk()
	6: x0
	7: phi0
	8: phi0
	9: phi1
	10: (phi0 -> phi1)
	11: (phi1 -> phi0)
	12: (phi0 -> ¬phi1)
	13: phi0
SVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: kore_dotk()
	6: x0
	7: phi0
	8: phi0
	9: phi1
	10: (phi0 -> phi1)
	11: (phi1 -> phi0)
	12: (phi0 -> ¬phi1)
	13: phi0
	14: X0
Mu 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: kore_dotk()
	6: x0
	7: phi0
	8: phi0
	9: phi1
	10: (phi0 -> phi1)
	11: (phi1 -> phi0)
	12: (phi0 -> ¬phi1)
	13: phi0
	14: (μ X0 . X0)
Instantiate 
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: kore_dotk()
	6: x0
	7: phi0
	8: phi0
	9: phi1
	10: (phi0 -> phi1)
	11: (phi1 -> phi0)
	12: (phi0 -> ¬phi1)
	13: phi0
	14: ⊥
Implies
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: kore_dotk()
	6: x0
	7: phi0
	8: phi0
	9: phi1
	10: (phi0 -> phi1)
	11: (phi1 -> phi0)
	12: (phi0 -> ¬phi1)
	13: (phi0 -> ⊥)
Instantiate 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: kore_dotk()
	6: x0
	7: phi0
	8: phi0
	9: phi1
	10: (phi0 -> phi1)
	11: (phi1 -> phi0)
	12: ¬(phi0 -> ¬phi1)
Instantiate 0, 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: kore_dotk()
	6: x0
	7: phi0
	8: phi0
	9: phi1
	10: ((phi0 -> phi1) ⋀ (phi1 -> phi0))
Instantiate 0, 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: kore_dotk()
	6: x0
	7: phi0
	8: (0 <-> 1)
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: kore_dotk()
	6: x0
	7: phi0
	8: (0 <-> 1)
	9: phi0
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: kore_dotk()
	6: x0
	7: phi0
	8: (0 <-> 1)
	9: phi0
	10: phi0
SVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: kore_dotk()
	6: x0
	7: phi0
	8: (0 <-> 1)
	9: phi0
	10: phi0
	11: X0
Mu 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: kore_dotk()
	6: x0
	7: phi0
	8: (0 <-> 1)
	9: phi0
	10: phi0
	11: (μ X0 . X0)
Instantiate 
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: kore_dotk()
	6: x0
	7: phi0
	8: (0 <-> 1)
	9: phi0
	10: phi0
	11: ⊥
Implies
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: kore_dotk()
	6: x0
	7: phi0
	8: (0 <-> 1)
	9: phi0
	10: (phi0 -> ⊥)
Instantiate 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: kore_dotk()
	6: x0
	7: phi0
	8: (0 <-> 1)
	9: ¬phi0
Symbol ⌈_⌉
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: kore_dotk()
	6: x0
	7: phi0
	8: (0 <-> 1)
	9: ¬phi0
	10: ⌈_⌉
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: kore_dotk()
	6: x0
	7: phi0
	8: (0 <-> 1)
	9: ¬phi0
	10: ⌈_⌉
	11: phi0
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: kore_dotk()
	6: x0
	7: phi0
	8: (0 <-> 1)
	9: ¬phi0
	10: (⌈_⌉ · phi0)
Instantiate 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: kore_dotk()
	6: x0
	7: phi0
	8: (0 <-> 1)
	9: ⌈ ¬phi0 ⌉
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: kore_dotk()
	6: x0
	7: phi0
	8: (0 <-> 1)
	9: ⌈ ¬phi0 ⌉
	10: phi0
SVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: kore_dotk()
	6: x0
	7: phi0
	8: (0 <-> 1)
	9: ⌈ ¬phi0 ⌉
	10: phi0
	11: X0
Mu 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: kore_dotk()
	6: x0
	7: phi0
	8: (0 <-> 1)
	9: ⌈ ¬phi0 ⌉
	10: phi0
	11: (μ X0 . X0)
Instantiate 
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: kore_dotk()
	6: x0
	7: phi0
	8: (0 <-> 1)
	9: ⌈ ¬phi0 ⌉
	10: phi0
	11: ⊥
Implies
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: kore_dotk()
	6: x0
	7: phi0
	8: (0 <-> 1)
	9: ⌈ ¬phi0 ⌉
	10: (phi0 -> ⊥)
Instantiate 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: kore_dotk()
	6: x0
	7: phi0
	8: (0 <-> 1)
	9: ¬⌈ ¬phi0 ⌉
Instantiate 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: kore_dotk()
	6: x0
	7: phi0
	8: ⌊ (0 <-> 1) ⌋
Instantiate 0, 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: kore_dotk()
	6: (x0 = phi0)
Exists 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: kore_dotk()
	6: (∃ x0 . (x0 = phi0))
Instantiate 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
Publish
Symbol ksort_SortGeneratedTopCell
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
Symbol ksort_SortBlock
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: ksort_SortBlock
Symbol ksort_SortKItem
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: ksort_SortBlock
	8: ksort_SortKItem
Symbol kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: ksort_SortBlock
	8: ksort_SortKItem
	9: kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block
Instantiate 
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: ksort_SortBlock
	8: ksort_SortKItem
	9: kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()
Symbol kore_inj
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: ksort_SortBlock
	8: ksort_SortKItem
	9: kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()
	10: kore_inj
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: ksort_SortBlock
	8: ksort_SortKItem
	9: kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()
	10: kore_inj
	11: phi0
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: ksort_SortBlock
	8: ksort_SortKItem
	9: kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()
	10: (kore_inj · phi0)
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: ksort_SortBlock
	8: ksort_SortKItem
	9: kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()
	10: (kore_inj · phi0)
	11: phi1
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: ksort_SortBlock
	8: ksort_SortKItem
	9: kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()
	10: ((kore_inj · phi0) · phi1)
MetaVar 2
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: ksort_SortBlock
	8: ksort_SortKItem
	9: kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()
	10: ((kore_inj · phi0) · phi1)
	11: phi2
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: ksort_SortBlock
	8: ksort_SortKItem
	9: kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()
	10: (((kore_inj · phi0) · phi1) · phi2)
Instantiate 0, 1, 2
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block())
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block())
	8: phi0
Symbol kore_kseq
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block())
	8: phi0
	9: kore_kseq
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block())
	8: phi0
	9: kore_kseq
	10: phi0
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block())
	8: phi0
	9: (kore_kseq · phi0)
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block())
	8: phi0
	9: (kore_kseq · phi0)
	10: phi1
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block())
	8: phi0
	9: ((kore_kseq · phi0) · phi1)
Instantiate 0, 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0)
Symbol kore_Lbl'-LT-'k'-GT-'
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0)
	8: kore_Lbl'-LT-'k'-GT-'
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0)
	8: kore_Lbl'-LT-'k'-GT-'
	9: phi0
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0)
	8: (kore_Lbl'-LT-'k'-GT-' · phi0)
Instantiate 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'>
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'>
	8: phi1
Symbol kore_Lbl'-LT-'T'-GT-'
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'>
	8: phi1
	9: kore_Lbl'-LT-'T'-GT-'
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'>
	8: phi1
	9: kore_Lbl'-LT-'T'-GT-'
	10: phi0
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'>
	8: phi1
	9: (kore_Lbl'-LT-'T'-GT-' · phi0)
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'>
	8: phi1
	9: (kore_Lbl'-LT-'T'-GT-' · phi0)
	10: phi1
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'>
	8: phi1
	9: ((kore_Lbl'-LT-'T'-GT-' · phi0) · phi1)
Instantiate 0, 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'>
MetaVar 2
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'>
	8: phi2
Symbol kore_Lbl'-LT-'generatedTop'-GT-'
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'>
	8: phi2
	9: kore_Lbl'-LT-'generatedTop'-GT-'
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'>
	8: phi2
	9: kore_Lbl'-LT-'generatedTop'-GT-'
	10: phi0
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'>
	8: phi2
	9: (kore_Lbl'-LT-'generatedTop'-GT-' · phi0)
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'>
	8: phi2
	9: (kore_Lbl'-LT-'generatedTop'-GT-' · phi0)
	10: phi1
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'>
	8: phi2
	9: ((kore_Lbl'-LT-'generatedTop'-GT-' · phi0) · phi1)
Instantiate 0, 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: phi0
Symbol kore_Lbl'-LT-'k'-GT-'
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: phi0
	9: kore_Lbl'-LT-'k'-GT-'
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: phi0
	9: kore_Lbl'-LT-'k'-GT-'
	10: phi0
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: phi0
	9: (kore_Lbl'-LT-'k'-GT-' · phi0)
Instantiate 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'>
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'>
	9: phi1
Symbol kore_Lbl'-LT-'T'-GT-'
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'>
	9: phi1
	10: kore_Lbl'-LT-'T'-GT-'
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'>
	9: phi1
	10: kore_Lbl'-LT-'T'-GT-'
	11: phi0
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'>
	9: phi1
	10: (kore_Lbl'-LT-'T'-GT-' · phi0)
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'>
	9: phi1
	10: (kore_Lbl'-LT-'T'-GT-' · phi0)
	11: phi1
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'>
	9: phi1
	10: ((kore_Lbl'-LT-'T'-GT-' · phi0) · phi1)
Instantiate 0, 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'>
MetaVar 2
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'>
	9: phi2
Symbol kore_Lbl'-LT-'generatedTop'-GT-'
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'>
	9: phi2
	10: kore_Lbl'-LT-'generatedTop'-GT-'
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'>
	9: phi2
	10: kore_Lbl'-LT-'generatedTop'-GT-'
	11: phi0
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'>
	9: phi2
	10: (kore_Lbl'-LT-'generatedTop'-GT-' · phi0)
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'>
	9: phi2
	10: (kore_Lbl'-LT-'generatedTop'-GT-' · phi0)
	11: phi1
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'>
	9: phi2
	10: ((kore_Lbl'-LT-'generatedTop'-GT-' · phi0) · phi1)
Instantiate 0, 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	9: phi0
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	9: phi0
	10: phi1
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	9: phi0
	10: phi1
	11: phi0
MetaVar 2
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	9: phi0
	10: phi1
	11: phi0
	12: phi2
Symbol kore_next
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	9: phi0
	10: phi1
	11: phi0
	12: phi2
	13: kore_next
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	9: phi0
	10: phi1
	11: phi0
	12: phi2
	13: kore_next
	14: phi1
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	9: phi0
	10: phi1
	11: phi0
	12: phi2
	13: (kore_next · phi1)
Instantiate 0, 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	9: phi0
	10: phi1
	11: ♦phi2
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	9: phi0
	10: phi1
	11: ♦phi2
	12: phi0
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	9: phi0
	10: phi1
	11: ♦phi2
	12: phi0
	13: phi0
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	9: phi0
	10: phi1
	11: ♦phi2
	12: phi0
	13: phi0
	14: phi1
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	9: phi0
	10: phi1
	11: ♦phi2
	12: phi0
	13: phi0
	14: phi1
	15: phi1
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	9: phi0
	10: phi1
	11: ♦phi2
	12: phi0
	13: phi0
	14: phi1
	15: phi1
	16: phi0
SVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	9: phi0
	10: phi1
	11: ♦phi2
	12: phi0
	13: phi0
	14: phi1
	15: phi1
	16: phi0
	17: X0
Mu 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	9: phi0
	10: phi1
	11: ♦phi2
	12: phi0
	13: phi0
	14: phi1
	15: phi1
	16: phi0
	17: (μ X0 . X0)
Instantiate 
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	9: phi0
	10: phi1
	11: ♦phi2
	12: phi0
	13: phi0
	14: phi1
	15: phi1
	16: phi0
	17: ⊥
Implies
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	9: phi0
	10: phi1
	11: ♦phi2
	12: phi0
	13: phi0
	14: phi1
	15: phi1
	16: (phi0 -> ⊥)
Instantiate 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	9: phi0
	10: phi1
	11: ♦phi2
	12: phi0
	13: phi0
	14: phi1
	15: ¬phi1
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	9: phi0
	10: phi1
	11: ♦phi2
	12: phi0
	13: phi0
	14: phi1
	15: ¬phi1
	16: phi0
Symbol inhabitant
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	9: phi0
	10: phi1
	11: ♦phi2
	12: phi0
	13: phi0
	14: phi1
	15: ¬phi1
	16: phi0
	17: inhabitant
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	9: phi0
	10: phi1
	11: ♦phi2
	12: phi0
	13: phi0
	14: phi1
	15: ¬phi1
	16: phi0
	17: inhabitant
	18: phi0
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	9: phi0
	10: phi1
	11: ♦phi2
	12: phi0
	13: phi0
	14: phi1
	15: ¬phi1
	16: phi0
	17: (inhabitant · phi0)
Instantiate 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	9: phi0
	10: phi1
	11: ♦phi2
	12: phi0
	13: phi0
	14: phi1
	15: ¬phi1
	16: k⊤:phi0
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	9: phi0
	10: phi1
	11: ♦phi2
	12: phi0
	13: phi0
	14: phi1
	15: ¬phi1
	16: k⊤:phi0
	17: phi0
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	9: phi0
	10: phi1
	11: ♦phi2
	12: phi0
	13: phi0
	14: phi1
	15: ¬phi1
	16: k⊤:phi0
	17: phi0
	18: phi1
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	9: phi0
	10: phi1
	11: ♦phi2
	12: phi0
	13: phi0
	14: phi1
	15: ¬phi1
	16: k⊤:phi0
	17: phi0
	18: phi1
	19: phi0
SVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	9: phi0
	10: phi1
	11: ♦phi2
	12: phi0
	13: phi0
	14: phi1
	15: ¬phi1
	16: k⊤:phi0
	17: phi0
	18: phi1
	19: phi0
	20: X0
Mu 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	9: phi0
	10: phi1
	11: ♦phi2
	12: phi0
	13: phi0
	14: phi1
	15: ¬phi1
	16: k⊤:phi0
	17: phi0
	18: phi1
	19: phi0
	20: (μ X0 . X0)
Instantiate 
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	9: phi0
	10: phi1
	11: ♦phi2
	12: phi0
	13: phi0
	14: phi1
	15: ¬phi1
	16: k⊤:phi0
	17: phi0
	18: phi1
	19: phi0
	20: ⊥
Implies
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	9: phi0
	10: phi1
	11: ♦phi2
	12: phi0
	13: phi0
	14: phi1
	15: ¬phi1
	16: k⊤:phi0
	17: phi0
	18: phi1
	19: (phi0 -> ⊥)
Instantiate 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	9: phi0
	10: phi1
	11: ♦phi2
	12: phi0
	13: phi0
	14: phi1
	15: ¬phi1
	16: k⊤:phi0
	17: phi0
	18: ¬phi1
Implies
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	9: phi0
	10: phi1
	11: ♦phi2
	12: phi0
	13: phi0
	14: phi1
	15: ¬phi1
	16: k⊤:phi0
	17: (phi0 -> ¬phi1)
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	9: phi0
	10: phi1
	11: ♦phi2
	12: phi0
	13: phi0
	14: phi1
	15: ¬phi1
	16: k⊤:phi0
	17: (phi0 -> ¬phi1)
	18: phi0
SVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	9: phi0
	10: phi1
	11: ♦phi2
	12: phi0
	13: phi0
	14: phi1
	15: ¬phi1
	16: k⊤:phi0
	17: (phi0 -> ¬phi1)
	18: phi0
	19: X0
Mu 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	9: phi0
	10: phi1
	11: ♦phi2
	12: phi0
	13: phi0
	14: phi1
	15: ¬phi1
	16: k⊤:phi0
	17: (phi0 -> ¬phi1)
	18: phi0
	19: (μ X0 . X0)
Instantiate 
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	9: phi0
	10: phi1
	11: ♦phi2
	12: phi0
	13: phi0
	14: phi1
	15: ¬phi1
	16: k⊤:phi0
	17: (phi0 -> ¬phi1)
	18: phi0
	19: ⊥
Implies
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	9: phi0
	10: phi1
	11: ♦phi2
	12: phi0
	13: phi0
	14: phi1
	15: ¬phi1
	16: k⊤:phi0
	17: (phi0 -> ¬phi1)
	18: (phi0 -> ⊥)
Instantiate 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	9: phi0
	10: phi1
	11: ♦phi2
	12: phi0
	13: phi0
	14: phi1
	15: ¬phi1
	16: k⊤:phi0
	17: ¬(phi0 -> ¬phi1)
Instantiate 0, 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	9: phi0
	10: phi1
	11: ♦phi2
	12: phi0
	13: phi0
	14: phi1
	15: (¬phi1 ⋀ k⊤:phi0)
Instantiate 0, 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	9: phi0
	10: phi1
	11: ♦phi2
	12: phi0
	13: (k¬phi1):phi0
MetaVar 2
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	9: phi0
	10: phi1
	11: ♦phi2
	12: phi0
	13: (k¬phi1):phi0
	14: phi2
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	9: phi0
	10: phi1
	11: ♦phi2
	12: phi0
	13: (k¬phi1):phi0
	14: phi2
	15: phi1
MetaVar 2
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	9: phi0
	10: phi1
	11: ♦phi2
	12: phi0
	13: (k¬phi1):phi0
	14: phi2
	15: phi1
	16: phi2
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	9: phi0
	10: phi1
	11: ♦phi2
	12: phi0
	13: (k¬phi1):phi0
	14: phi2
	15: phi1
	16: phi2
	17: phi0
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	9: phi0
	10: phi1
	11: ♦phi2
	12: phi0
	13: (k¬phi1):phi0
	14: phi2
	15: phi1
	16: phi2
	17: phi0
	18: phi0
SVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	9: phi0
	10: phi1
	11: ♦phi2
	12: phi0
	13: (k¬phi1):phi0
	14: phi2
	15: phi1
	16: phi2
	17: phi0
	18: phi0
	19: X0
Mu 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	9: phi0
	10: phi1
	11: ♦phi2
	12: phi0
	13: (k¬phi1):phi0
	14: phi2
	15: phi1
	16: phi2
	17: phi0
	18: phi0
	19: (μ X0 . X0)
Instantiate 
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	9: phi0
	10: phi1
	11: ♦phi2
	12: phi0
	13: (k¬phi1):phi0
	14: phi2
	15: phi1
	16: phi2
	17: phi0
	18: phi0
	19: ⊥
Implies
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	9: phi0
	10: phi1
	11: ♦phi2
	12: phi0
	13: (k¬phi1):phi0
	14: phi2
	15: phi1
	16: phi2
	17: phi0
	18: (phi0 -> ⊥)
Instantiate 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	9: phi0
	10: phi1
	11: ♦phi2
	12: phi0
	13: (k¬phi1):phi0
	14: phi2
	15: phi1
	16: phi2
	17: ¬phi0
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	9: phi0
	10: phi1
	11: ♦phi2
	12: phi0
	13: (k¬phi1):phi0
	14: phi2
	15: phi1
	16: phi2
	17: ¬phi0
	18: phi1
Implies
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	9: phi0
	10: phi1
	11: ♦phi2
	12: phi0
	13: (k¬phi1):phi0
	14: phi2
	15: phi1
	16: phi2
	17: (¬phi0 -> phi1)
Instantiate 0, 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	9: phi0
	10: phi1
	11: ♦phi2
	12: phi0
	13: (k¬phi1):phi0
	14: phi2
	15: (phi1 ⋁ phi2)
Instantiate 0, 1, 2
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	9: phi0
	10: phi1
	11: ♦phi2
	12: ((k¬phi1):phi0 k⋁ phi2)
Instantiate 0, 1, 2
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: ksort_SortGeneratedTopCell
	7: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	8: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>
	9: (phi1 k-> ♦phi2):phi0
Instantiate 0, 1, 2
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: (kore_inj(phi0, phi1, phi2) = phi2)
	3: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	4: functional(<kore_Lbl'-LT-'s'-GT-'> kore_Lbl'UndsCommUndsCommUndsCommUndsCommUndsCommUndsUnds'IMP5-SYNTAX'Unds'Vars5'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int'Unds'Int(dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt, dv(0):ksort_SortInt) </kore_Lbl'-LT-'s'-GT-'>)
	5: functional(kore_dotk())
	6: (<kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortBlock, ksort_SortKItem, kore_Lbl'LBraRBraUnds'IMP5-SYNTAX'Unds'Block()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'> k=> <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'T'-GT-'> <kore_Lbl'-LT-'k'-GT-'> phi0 </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'T'-GT-'> phi2 </kore_Lbl'-LT-'generatedTop'-GT-'>):ksort_SortGeneratedTopCell
Publish
