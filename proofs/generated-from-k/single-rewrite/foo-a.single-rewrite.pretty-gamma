MetaVar 0eFresh, len=1 x0 

	Stack:
	0: phi0
EVar 0
	Stack:
	0: phi0
	1: x0
MetaVar 0
	Stack:
	0: phi0
	1: x0
	2: phi0
MetaVar 1
	Stack:
	0: phi0
	1: x0
	2: phi0
	3: phi1
MetaVar 0
	Stack:
	0: phi0
	1: x0
	2: phi0
	3: phi1
	4: phi0
MetaVar 1
	Stack:
	0: phi0
	1: x0
	2: phi0
	3: phi1
	4: phi0
	5: phi1
Implies
	Stack:
	0: phi0
	1: x0
	2: phi0
	3: phi1
	4: (phi0 -> phi1)
MetaVar 1
	Stack:
	0: phi0
	1: x0
	2: phi0
	3: phi1
	4: (phi0 -> phi1)
	5: phi1
MetaVar 0
	Stack:
	0: phi0
	1: x0
	2: phi0
	3: phi1
	4: (phi0 -> phi1)
	5: phi1
	6: phi0
Implies
	Stack:
	0: phi0
	1: x0
	2: phi0
	3: phi1
	4: (phi0 -> phi1)
	5: (phi1 -> phi0)
MetaVar 0
	Stack:
	0: phi0
	1: x0
	2: phi0
	3: phi1
	4: (phi0 -> phi1)
	5: (phi1 -> phi0)
	6: phi0
MetaVar 1
	Stack:
	0: phi0
	1: x0
	2: phi0
	3: phi1
	4: (phi0 -> phi1)
	5: (phi1 -> phi0)
	6: phi0
	7: phi1
MetaVar 0
	Stack:
	0: phi0
	1: x0
	2: phi0
	3: phi1
	4: (phi0 -> phi1)
	5: (phi1 -> phi0)
	6: phi0
	7: phi1
	8: phi0
SVar 0
	Stack:
	0: phi0
	1: x0
	2: phi0
	3: phi1
	4: (phi0 -> phi1)
	5: (phi1 -> phi0)
	6: phi0
	7: phi1
	8: phi0
	9: X0
Mu 0
	Stack:
	0: phi0
	1: x0
	2: phi0
	3: phi1
	4: (phi0 -> phi1)
	5: (phi1 -> phi0)
	6: phi0
	7: phi1
	8: phi0
	9: (μ X0 . X0)
Instantiate 
	Stack:
	0: phi0
	1: x0
	2: phi0
	3: phi1
	4: (phi0 -> phi1)
	5: (phi1 -> phi0)
	6: phi0
	7: phi1
	8: phi0
	9: ⊥
Implies
	Stack:
	0: phi0
	1: x0
	2: phi0
	3: phi1
	4: (phi0 -> phi1)
	5: (phi1 -> phi0)
	6: phi0
	7: phi1
	8: (phi0 -> ⊥)
Instantiate 0
	Stack:
	0: phi0
	1: x0
	2: phi0
	3: phi1
	4: (phi0 -> phi1)
	5: (phi1 -> phi0)
	6: phi0
	7: ¬phi1
Implies
	Stack:
	0: phi0
	1: x0
	2: phi0
	3: phi1
	4: (phi0 -> phi1)
	5: (phi1 -> phi0)
	6: (phi0 -> ¬phi1)
MetaVar 0
	Stack:
	0: phi0
	1: x0
	2: phi0
	3: phi1
	4: (phi0 -> phi1)
	5: (phi1 -> phi0)
	6: (phi0 -> ¬phi1)
	7: phi0
SVar 0
	Stack:
	0: phi0
	1: x0
	2: phi0
	3: phi1
	4: (phi0 -> phi1)
	5: (phi1 -> phi0)
	6: (phi0 -> ¬phi1)
	7: phi0
	8: X0
Mu 0
	Stack:
	0: phi0
	1: x0
	2: phi0
	3: phi1
	4: (phi0 -> phi1)
	5: (phi1 -> phi0)
	6: (phi0 -> ¬phi1)
	7: phi0
	8: (μ X0 . X0)
Instantiate 
	Stack:
	0: phi0
	1: x0
	2: phi0
	3: phi1
	4: (phi0 -> phi1)
	5: (phi1 -> phi0)
	6: (phi0 -> ¬phi1)
	7: phi0
	8: ⊥
Implies
	Stack:
	0: phi0
	1: x0
	2: phi0
	3: phi1
	4: (phi0 -> phi1)
	5: (phi1 -> phi0)
	6: (phi0 -> ¬phi1)
	7: (phi0 -> ⊥)
Instantiate 0
	Stack:
	0: phi0
	1: x0
	2: phi0
	3: phi1
	4: (phi0 -> phi1)
	5: (phi1 -> phi0)
	6: ¬(phi0 -> ¬phi1)
Instantiate 0, 1
	Stack:
	0: phi0
	1: x0
	2: phi0
	3: phi1
	4: ((phi0 -> phi1) ⋀ (phi1 -> phi0))
Instantiate 0, 1
	Stack:
	0: phi0
	1: x0
	2: (0 <-> 1)
MetaVar 0
	Stack:
	0: phi0
	1: x0
	2: (0 <-> 1)
	3: phi0
MetaVar 0
	Stack:
	0: phi0
	1: x0
	2: (0 <-> 1)
	3: phi0
	4: phi0
SVar 0
	Stack:
	0: phi0
	1: x0
	2: (0 <-> 1)
	3: phi0
	4: phi0
	5: X0
Mu 0
	Stack:
	0: phi0
	1: x0
	2: (0 <-> 1)
	3: phi0
	4: phi0
	5: (μ X0 . X0)
Instantiate 
	Stack:
	0: phi0
	1: x0
	2: (0 <-> 1)
	3: phi0
	4: phi0
	5: ⊥
Implies
	Stack:
	0: phi0
	1: x0
	2: (0 <-> 1)
	3: phi0
	4: (phi0 -> ⊥)
Instantiate 0
	Stack:
	0: phi0
	1: x0
	2: (0 <-> 1)
	3: ¬phi0
Symbol ⌈_⌉
	Stack:
	0: phi0
	1: x0
	2: (0 <-> 1)
	3: ¬phi0
	4: ⌈_⌉
MetaVar 0
	Stack:
	0: phi0
	1: x0
	2: (0 <-> 1)
	3: ¬phi0
	4: ⌈_⌉
	5: phi0
App
	Stack:
	0: phi0
	1: x0
	2: (0 <-> 1)
	3: ¬phi0
	4: (⌈_⌉ · phi0)
Instantiate 0
	Stack:
	0: phi0
	1: x0
	2: (0 <-> 1)
	3: ⌈ ¬phi0 ⌉
MetaVar 0
	Stack:
	0: phi0
	1: x0
	2: (0 <-> 1)
	3: ⌈ ¬phi0 ⌉
	4: phi0
SVar 0
	Stack:
	0: phi0
	1: x0
	2: (0 <-> 1)
	3: ⌈ ¬phi0 ⌉
	4: phi0
	5: X0
Mu 0
	Stack:
	0: phi0
	1: x0
	2: (0 <-> 1)
	3: ⌈ ¬phi0 ⌉
	4: phi0
	5: (μ X0 . X0)
Instantiate 
	Stack:
	0: phi0
	1: x0
	2: (0 <-> 1)
	3: ⌈ ¬phi0 ⌉
	4: phi0
	5: ⊥
Implies
	Stack:
	0: phi0
	1: x0
	2: (0 <-> 1)
	3: ⌈ ¬phi0 ⌉
	4: (phi0 -> ⊥)
Instantiate 0
	Stack:
	0: phi0
	1: x0
	2: (0 <-> 1)
	3: ¬⌈ ¬phi0 ⌉
Instantiate 0
	Stack:
	0: phi0
	1: x0
	2: ⌊ (0 <-> 1) ⌋
Instantiate 0, 1
	Stack:
	0: (phi0 = x0)
Exists 0
	Stack:
	0: (∃ x0 . (phi0 = x0))
MetaVar 1
	Stack:
	0: (∃ x0 . (phi0 = x0))
	1: phi1
MetaVar 0
	Stack:
	0: (∃ x0 . (phi0 = x0))
	1: phi1
	2: phi0
MetaVar 0
	Stack:
	0: (∃ x0 . (phi0 = x0))
	1: phi1
	2: phi0
	3: phi0
SVar 0
	Stack:
	0: (∃ x0 . (phi0 = x0))
	1: phi1
	2: phi0
	3: phi0
	4: X0
Mu 0
	Stack:
	0: (∃ x0 . (phi0 = x0))
	1: phi1
	2: phi0
	3: phi0
	4: (μ X0 . X0)
Instantiate 
	Stack:
	0: (∃ x0 . (phi0 = x0))
	1: phi1
	2: phi0
	3: phi0
	4: ⊥
Implies
	Stack:
	0: (∃ x0 . (phi0 = x0))
	1: phi1
	2: phi0
	3: (phi0 -> ⊥)
Instantiate 0
	Stack:
	0: (∃ x0 . (phi0 = x0))
	1: phi1
	2: ¬phi0
Exists 1
	Stack:
	0: (∃ x0 . (phi0 = x0))
	1: phi1
	2: (∃ x1 . ¬phi0)
MetaVar 0
	Stack:
	0: (∃ x0 . (phi0 = x0))
	1: phi1
	2: (∃ x1 . ¬phi0)
	3: phi0
SVar 0
	Stack:
	0: (∃ x0 . (phi0 = x0))
	1: phi1
	2: (∃ x1 . ¬phi0)
	3: phi0
	4: X0
Mu 0
	Stack:
	0: (∃ x0 . (phi0 = x0))
	1: phi1
	2: (∃ x1 . ¬phi0)
	3: phi0
	4: (μ X0 . X0)
Instantiate 
	Stack:
	0: (∃ x0 . (phi0 = x0))
	1: phi1
	2: (∃ x1 . ¬phi0)
	3: phi0
	4: ⊥
Implies
	Stack:
	0: (∃ x0 . (phi0 = x0))
	1: phi1
	2: (∃ x1 . ¬phi0)
	3: (phi0 -> ⊥)
Instantiate 0
	Stack:
	0: (∃ x0 . (phi0 = x0))
	1: phi1
	2: ¬(∃ x1 . ¬phi0)
Instantiate 0
	Stack:
	0: (∃ x0 . (phi0 = x0))
	1: (phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}]
MetaVar 0eFresh, len=1 x0 

	Stack:
	0: (∃ x0 . (phi0 = x0))
	1: (phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}]
	2: phi0
MetaVar 1
	Stack:
	0: (∃ x0 . (phi0 = x0))
	1: (phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}]
	2: phi0
	3: phi1
ESubst id=1
	Stack:
	0: (∃ x0 . (phi0 = x0))
	1: (phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}]
	2: phi1[phi0/x1]
Implies
	Stack:
	0: (∃ x0 . (phi0 = x0))
	1: ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1])
Implies
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
Publish
EVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: x0
Symbol ⌈_⌉
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: x0
	2: ⌈_⌉
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: x0
	2: ⌈_⌉
	3: phi0
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: x0
	2: (⌈_⌉ · phi0)
Instantiate 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
Publish
Symbol ksort_SortInt
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: ksort_SortInt
Symbol 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: ksort_SortInt
	3: 0
Symbol kore_dv
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: ksort_SortInt
	3: 0
	4: kore_dv
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: ksort_SortInt
	3: 0
	4: kore_dv
	5: phi0
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: ksort_SortInt
	3: 0
	4: (kore_dv · phi0)
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: ksort_SortInt
	3: 0
	4: (kore_dv · phi0)
	5: phi1
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: ksort_SortInt
	3: 0
	4: ((kore_dv · phi0) · phi1)
Instantiate 0, 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: dv(0):ksort_SortInt
Symbol kore_Lbl'-LT-'generatedCounter'-GT-'
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: dv(0):ksort_SortInt
	3: kore_Lbl'-LT-'generatedCounter'-GT-'
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: dv(0):ksort_SortInt
	3: kore_Lbl'-LT-'generatedCounter'-GT-'
	4: phi0
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: dv(0):ksort_SortInt
	3: (kore_Lbl'-LT-'generatedCounter'-GT-' · phi0)
Instantiate 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
EVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	3: x0
MetaVar 0eFresh, len=1 x0 

	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	3: x0
	4: phi0
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	3: x0
	4: phi0
	5: phi0
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	3: x0
	4: phi0
	5: phi0
	6: phi1
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	3: x0
	4: phi0
	5: phi0
	6: phi1
	7: phi0
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	3: x0
	4: phi0
	5: phi0
	6: phi1
	7: phi0
	8: phi1
Implies
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	3: x0
	4: phi0
	5: phi0
	6: phi1
	7: (phi0 -> phi1)
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	3: x0
	4: phi0
	5: phi0
	6: phi1
	7: (phi0 -> phi1)
	8: phi1
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	3: x0
	4: phi0
	5: phi0
	6: phi1
	7: (phi0 -> phi1)
	8: phi1
	9: phi0
Implies
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	3: x0
	4: phi0
	5: phi0
	6: phi1
	7: (phi0 -> phi1)
	8: (phi1 -> phi0)
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	3: x0
	4: phi0
	5: phi0
	6: phi1
	7: (phi0 -> phi1)
	8: (phi1 -> phi0)
	9: phi0
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	3: x0
	4: phi0
	5: phi0
	6: phi1
	7: (phi0 -> phi1)
	8: (phi1 -> phi0)
	9: phi0
	10: phi1
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	3: x0
	4: phi0
	5: phi0
	6: phi1
	7: (phi0 -> phi1)
	8: (phi1 -> phi0)
	9: phi0
	10: phi1
	11: phi0
SVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	3: x0
	4: phi0
	5: phi0
	6: phi1
	7: (phi0 -> phi1)
	8: (phi1 -> phi0)
	9: phi0
	10: phi1
	11: phi0
	12: X0
Mu 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	3: x0
	4: phi0
	5: phi0
	6: phi1
	7: (phi0 -> phi1)
	8: (phi1 -> phi0)
	9: phi0
	10: phi1
	11: phi0
	12: (μ X0 . X0)
Instantiate 
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	3: x0
	4: phi0
	5: phi0
	6: phi1
	7: (phi0 -> phi1)
	8: (phi1 -> phi0)
	9: phi0
	10: phi1
	11: phi0
	12: ⊥
Implies
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	3: x0
	4: phi0
	5: phi0
	6: phi1
	7: (phi0 -> phi1)
	8: (phi1 -> phi0)
	9: phi0
	10: phi1
	11: (phi0 -> ⊥)
Instantiate 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	3: x0
	4: phi0
	5: phi0
	6: phi1
	7: (phi0 -> phi1)
	8: (phi1 -> phi0)
	9: phi0
	10: ¬phi1
Implies
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	3: x0
	4: phi0
	5: phi0
	6: phi1
	7: (phi0 -> phi1)
	8: (phi1 -> phi0)
	9: (phi0 -> ¬phi1)
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	3: x0
	4: phi0
	5: phi0
	6: phi1
	7: (phi0 -> phi1)
	8: (phi1 -> phi0)
	9: (phi0 -> ¬phi1)
	10: phi0
SVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	3: x0
	4: phi0
	5: phi0
	6: phi1
	7: (phi0 -> phi1)
	8: (phi1 -> phi0)
	9: (phi0 -> ¬phi1)
	10: phi0
	11: X0
Mu 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	3: x0
	4: phi0
	5: phi0
	6: phi1
	7: (phi0 -> phi1)
	8: (phi1 -> phi0)
	9: (phi0 -> ¬phi1)
	10: phi0
	11: (μ X0 . X0)
Instantiate 
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	3: x0
	4: phi0
	5: phi0
	6: phi1
	7: (phi0 -> phi1)
	8: (phi1 -> phi0)
	9: (phi0 -> ¬phi1)
	10: phi0
	11: ⊥
Implies
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	3: x0
	4: phi0
	5: phi0
	6: phi1
	7: (phi0 -> phi1)
	8: (phi1 -> phi0)
	9: (phi0 -> ¬phi1)
	10: (phi0 -> ⊥)
Instantiate 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	3: x0
	4: phi0
	5: phi0
	6: phi1
	7: (phi0 -> phi1)
	8: (phi1 -> phi0)
	9: ¬(phi0 -> ¬phi1)
Instantiate 0, 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	3: x0
	4: phi0
	5: phi0
	6: phi1
	7: ((phi0 -> phi1) ⋀ (phi1 -> phi0))
Instantiate 0, 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	3: x0
	4: phi0
	5: (0 <-> 1)
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	3: x0
	4: phi0
	5: (0 <-> 1)
	6: phi0
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	3: x0
	4: phi0
	5: (0 <-> 1)
	6: phi0
	7: phi0
SVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	3: x0
	4: phi0
	5: (0 <-> 1)
	6: phi0
	7: phi0
	8: X0
Mu 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	3: x0
	4: phi0
	5: (0 <-> 1)
	6: phi0
	7: phi0
	8: (μ X0 . X0)
Instantiate 
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	3: x0
	4: phi0
	5: (0 <-> 1)
	6: phi0
	7: phi0
	8: ⊥
Implies
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	3: x0
	4: phi0
	5: (0 <-> 1)
	6: phi0
	7: (phi0 -> ⊥)
Instantiate 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	3: x0
	4: phi0
	5: (0 <-> 1)
	6: ¬phi0
Symbol ⌈_⌉
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	3: x0
	4: phi0
	5: (0 <-> 1)
	6: ¬phi0
	7: ⌈_⌉
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	3: x0
	4: phi0
	5: (0 <-> 1)
	6: ¬phi0
	7: ⌈_⌉
	8: phi0
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	3: x0
	4: phi0
	5: (0 <-> 1)
	6: ¬phi0
	7: (⌈_⌉ · phi0)
Instantiate 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	3: x0
	4: phi0
	5: (0 <-> 1)
	6: ⌈ ¬phi0 ⌉
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	3: x0
	4: phi0
	5: (0 <-> 1)
	6: ⌈ ¬phi0 ⌉
	7: phi0
SVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	3: x0
	4: phi0
	5: (0 <-> 1)
	6: ⌈ ¬phi0 ⌉
	7: phi0
	8: X0
Mu 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	3: x0
	4: phi0
	5: (0 <-> 1)
	6: ⌈ ¬phi0 ⌉
	7: phi0
	8: (μ X0 . X0)
Instantiate 
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	3: x0
	4: phi0
	5: (0 <-> 1)
	6: ⌈ ¬phi0 ⌉
	7: phi0
	8: ⊥
Implies
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	3: x0
	4: phi0
	5: (0 <-> 1)
	6: ⌈ ¬phi0 ⌉
	7: (phi0 -> ⊥)
Instantiate 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	3: x0
	4: phi0
	5: (0 <-> 1)
	6: ¬⌈ ¬phi0 ⌉
Instantiate 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	3: x0
	4: phi0
	5: ⌊ (0 <-> 1) ⌋
Instantiate 0, 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	3: (x0 = phi0)
Exists 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: <kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>
	3: (∃ x0 . (x0 = phi0))
Instantiate 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
Publish
Symbol kore_dotk
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: kore_dotk
Instantiate 
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: kore_dotk()
EVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: kore_dotk()
	4: x0
MetaVar 0eFresh, len=1 x0 

	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: kore_dotk()
	4: x0
	5: phi0
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: kore_dotk()
	4: x0
	5: phi0
	6: phi0
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: kore_dotk()
	4: x0
	5: phi0
	6: phi0
	7: phi1
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: kore_dotk()
	4: x0
	5: phi0
	6: phi0
	7: phi1
	8: phi0
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: kore_dotk()
	4: x0
	5: phi0
	6: phi0
	7: phi1
	8: phi0
	9: phi1
Implies
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: kore_dotk()
	4: x0
	5: phi0
	6: phi0
	7: phi1
	8: (phi0 -> phi1)
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: kore_dotk()
	4: x0
	5: phi0
	6: phi0
	7: phi1
	8: (phi0 -> phi1)
	9: phi1
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: kore_dotk()
	4: x0
	5: phi0
	6: phi0
	7: phi1
	8: (phi0 -> phi1)
	9: phi1
	10: phi0
Implies
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: kore_dotk()
	4: x0
	5: phi0
	6: phi0
	7: phi1
	8: (phi0 -> phi1)
	9: (phi1 -> phi0)
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: kore_dotk()
	4: x0
	5: phi0
	6: phi0
	7: phi1
	8: (phi0 -> phi1)
	9: (phi1 -> phi0)
	10: phi0
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: kore_dotk()
	4: x0
	5: phi0
	6: phi0
	7: phi1
	8: (phi0 -> phi1)
	9: (phi1 -> phi0)
	10: phi0
	11: phi1
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: kore_dotk()
	4: x0
	5: phi0
	6: phi0
	7: phi1
	8: (phi0 -> phi1)
	9: (phi1 -> phi0)
	10: phi0
	11: phi1
	12: phi0
SVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: kore_dotk()
	4: x0
	5: phi0
	6: phi0
	7: phi1
	8: (phi0 -> phi1)
	9: (phi1 -> phi0)
	10: phi0
	11: phi1
	12: phi0
	13: X0
Mu 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: kore_dotk()
	4: x0
	5: phi0
	6: phi0
	7: phi1
	8: (phi0 -> phi1)
	9: (phi1 -> phi0)
	10: phi0
	11: phi1
	12: phi0
	13: (μ X0 . X0)
Instantiate 
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: kore_dotk()
	4: x0
	5: phi0
	6: phi0
	7: phi1
	8: (phi0 -> phi1)
	9: (phi1 -> phi0)
	10: phi0
	11: phi1
	12: phi0
	13: ⊥
Implies
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: kore_dotk()
	4: x0
	5: phi0
	6: phi0
	7: phi1
	8: (phi0 -> phi1)
	9: (phi1 -> phi0)
	10: phi0
	11: phi1
	12: (phi0 -> ⊥)
Instantiate 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: kore_dotk()
	4: x0
	5: phi0
	6: phi0
	7: phi1
	8: (phi0 -> phi1)
	9: (phi1 -> phi0)
	10: phi0
	11: ¬phi1
Implies
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: kore_dotk()
	4: x0
	5: phi0
	6: phi0
	7: phi1
	8: (phi0 -> phi1)
	9: (phi1 -> phi0)
	10: (phi0 -> ¬phi1)
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: kore_dotk()
	4: x0
	5: phi0
	6: phi0
	7: phi1
	8: (phi0 -> phi1)
	9: (phi1 -> phi0)
	10: (phi0 -> ¬phi1)
	11: phi0
SVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: kore_dotk()
	4: x0
	5: phi0
	6: phi0
	7: phi1
	8: (phi0 -> phi1)
	9: (phi1 -> phi0)
	10: (phi0 -> ¬phi1)
	11: phi0
	12: X0
Mu 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: kore_dotk()
	4: x0
	5: phi0
	6: phi0
	7: phi1
	8: (phi0 -> phi1)
	9: (phi1 -> phi0)
	10: (phi0 -> ¬phi1)
	11: phi0
	12: (μ X0 . X0)
Instantiate 
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: kore_dotk()
	4: x0
	5: phi0
	6: phi0
	7: phi1
	8: (phi0 -> phi1)
	9: (phi1 -> phi0)
	10: (phi0 -> ¬phi1)
	11: phi0
	12: ⊥
Implies
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: kore_dotk()
	4: x0
	5: phi0
	6: phi0
	7: phi1
	8: (phi0 -> phi1)
	9: (phi1 -> phi0)
	10: (phi0 -> ¬phi1)
	11: (phi0 -> ⊥)
Instantiate 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: kore_dotk()
	4: x0
	5: phi0
	6: phi0
	7: phi1
	8: (phi0 -> phi1)
	9: (phi1 -> phi0)
	10: ¬(phi0 -> ¬phi1)
Instantiate 0, 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: kore_dotk()
	4: x0
	5: phi0
	6: phi0
	7: phi1
	8: ((phi0 -> phi1) ⋀ (phi1 -> phi0))
Instantiate 0, 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: kore_dotk()
	4: x0
	5: phi0
	6: (0 <-> 1)
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: kore_dotk()
	4: x0
	5: phi0
	6: (0 <-> 1)
	7: phi0
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: kore_dotk()
	4: x0
	5: phi0
	6: (0 <-> 1)
	7: phi0
	8: phi0
SVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: kore_dotk()
	4: x0
	5: phi0
	6: (0 <-> 1)
	7: phi0
	8: phi0
	9: X0
Mu 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: kore_dotk()
	4: x0
	5: phi0
	6: (0 <-> 1)
	7: phi0
	8: phi0
	9: (μ X0 . X0)
Instantiate 
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: kore_dotk()
	4: x0
	5: phi0
	6: (0 <-> 1)
	7: phi0
	8: phi0
	9: ⊥
Implies
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: kore_dotk()
	4: x0
	5: phi0
	6: (0 <-> 1)
	7: phi0
	8: (phi0 -> ⊥)
Instantiate 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: kore_dotk()
	4: x0
	5: phi0
	6: (0 <-> 1)
	7: ¬phi0
Symbol ⌈_⌉
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: kore_dotk()
	4: x0
	5: phi0
	6: (0 <-> 1)
	7: ¬phi0
	8: ⌈_⌉
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: kore_dotk()
	4: x0
	5: phi0
	6: (0 <-> 1)
	7: ¬phi0
	8: ⌈_⌉
	9: phi0
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: kore_dotk()
	4: x0
	5: phi0
	6: (0 <-> 1)
	7: ¬phi0
	8: (⌈_⌉ · phi0)
Instantiate 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: kore_dotk()
	4: x0
	5: phi0
	6: (0 <-> 1)
	7: ⌈ ¬phi0 ⌉
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: kore_dotk()
	4: x0
	5: phi0
	6: (0 <-> 1)
	7: ⌈ ¬phi0 ⌉
	8: phi0
SVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: kore_dotk()
	4: x0
	5: phi0
	6: (0 <-> 1)
	7: ⌈ ¬phi0 ⌉
	8: phi0
	9: X0
Mu 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: kore_dotk()
	4: x0
	5: phi0
	6: (0 <-> 1)
	7: ⌈ ¬phi0 ⌉
	8: phi0
	9: (μ X0 . X0)
Instantiate 
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: kore_dotk()
	4: x0
	5: phi0
	6: (0 <-> 1)
	7: ⌈ ¬phi0 ⌉
	8: phi0
	9: ⊥
Implies
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: kore_dotk()
	4: x0
	5: phi0
	6: (0 <-> 1)
	7: ⌈ ¬phi0 ⌉
	8: (phi0 -> ⊥)
Instantiate 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: kore_dotk()
	4: x0
	5: phi0
	6: (0 <-> 1)
	7: ¬⌈ ¬phi0 ⌉
Instantiate 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: kore_dotk()
	4: x0
	5: phi0
	6: ⌊ (0 <-> 1) ⌋
Instantiate 0, 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: kore_dotk()
	4: (x0 = phi0)
Exists 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: kore_dotk()
	4: (∃ x0 . (x0 = phi0))
Instantiate 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
Publish
Symbol ksort_SortGeneratedTopCell
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
Symbol ksort_SortFoo
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: ksort_SortFoo
Symbol ksort_SortKItem
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: ksort_SortFoo
	6: ksort_SortKItem
Symbol kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: ksort_SortFoo
	6: ksort_SortKItem
	7: kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo
Instantiate 
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: ksort_SortFoo
	6: ksort_SortKItem
	7: kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()
Symbol kore_inj
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: ksort_SortFoo
	6: ksort_SortKItem
	7: kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()
	8: kore_inj
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: ksort_SortFoo
	6: ksort_SortKItem
	7: kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()
	8: kore_inj
	9: phi0
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: ksort_SortFoo
	6: ksort_SortKItem
	7: kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()
	8: (kore_inj · phi0)
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: ksort_SortFoo
	6: ksort_SortKItem
	7: kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()
	8: (kore_inj · phi0)
	9: phi1
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: ksort_SortFoo
	6: ksort_SortKItem
	7: kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()
	8: ((kore_inj · phi0) · phi1)
MetaVar 2
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: ksort_SortFoo
	6: ksort_SortKItem
	7: kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()
	8: ((kore_inj · phi0) · phi1)
	9: phi2
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: ksort_SortFoo
	6: ksort_SortKItem
	7: kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()
	8: (((kore_inj · phi0) · phi1) · phi2)
Instantiate 0, 1, 2
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo())
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo())
	6: phi0
Symbol kore_kseq
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo())
	6: phi0
	7: kore_kseq
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo())
	6: phi0
	7: kore_kseq
	8: phi0
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo())
	6: phi0
	7: (kore_kseq · phi0)
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo())
	6: phi0
	7: (kore_kseq · phi0)
	8: phi1
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo())
	6: phi0
	7: ((kore_kseq · phi0) · phi1)
Instantiate 0, 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0)
Symbol kore_Lbl'-LT-'k'-GT-'
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0)
	6: kore_Lbl'-LT-'k'-GT-'
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0)
	6: kore_Lbl'-LT-'k'-GT-'
	7: phi0
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0)
	6: (kore_Lbl'-LT-'k'-GT-' · phi0)
Instantiate 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'>
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'>
	6: phi1
Symbol kore_Lbl'-LT-'generatedTop'-GT-'
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'>
	6: phi1
	7: kore_Lbl'-LT-'generatedTop'-GT-'
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'>
	6: phi1
	7: kore_Lbl'-LT-'generatedTop'-GT-'
	8: phi0
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'>
	6: phi1
	7: (kore_Lbl'-LT-'generatedTop'-GT-' · phi0)
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'>
	6: phi1
	7: (kore_Lbl'-LT-'generatedTop'-GT-' · phi0)
	8: phi1
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'>
	6: phi1
	7: ((kore_Lbl'-LT-'generatedTop'-GT-' · phi0) · phi1)
Instantiate 0, 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
Symbol ksort_SortFoo
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: ksort_SortFoo
Symbol ksort_SortKItem
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: ksort_SortFoo
	7: ksort_SortKItem
Symbol kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: ksort_SortFoo
	7: ksort_SortKItem
	8: kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo
Instantiate 
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: ksort_SortFoo
	7: ksort_SortKItem
	8: kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()
Symbol kore_inj
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: ksort_SortFoo
	7: ksort_SortKItem
	8: kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()
	9: kore_inj
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: ksort_SortFoo
	7: ksort_SortKItem
	8: kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()
	9: kore_inj
	10: phi0
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: ksort_SortFoo
	7: ksort_SortKItem
	8: kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()
	9: (kore_inj · phi0)
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: ksort_SortFoo
	7: ksort_SortKItem
	8: kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()
	9: (kore_inj · phi0)
	10: phi1
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: ksort_SortFoo
	7: ksort_SortKItem
	8: kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()
	9: ((kore_inj · phi0) · phi1)
MetaVar 2
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: ksort_SortFoo
	7: ksort_SortKItem
	8: kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()
	9: ((kore_inj · phi0) · phi1)
	10: phi2
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: ksort_SortFoo
	7: ksort_SortKItem
	8: kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()
	9: (((kore_inj · phi0) · phi1) · phi2)
Instantiate 0, 1, 2
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo())
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo())
	7: phi0
Symbol kore_kseq
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo())
	7: phi0
	8: kore_kseq
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo())
	7: phi0
	8: kore_kseq
	9: phi0
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo())
	7: phi0
	8: (kore_kseq · phi0)
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo())
	7: phi0
	8: (kore_kseq · phi0)
	9: phi1
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo())
	7: phi0
	8: ((kore_kseq · phi0) · phi1)
Instantiate 0, 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0)
Symbol kore_Lbl'-LT-'k'-GT-'
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0)
	7: kore_Lbl'-LT-'k'-GT-'
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0)
	7: kore_Lbl'-LT-'k'-GT-'
	8: phi0
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0)
	7: (kore_Lbl'-LT-'k'-GT-' · phi0)
Instantiate 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'>
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'>
	7: phi1
Symbol kore_Lbl'-LT-'generatedTop'-GT-'
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'>
	7: phi1
	8: kore_Lbl'-LT-'generatedTop'-GT-'
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'>
	7: phi1
	8: kore_Lbl'-LT-'generatedTop'-GT-'
	9: phi0
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'>
	7: phi1
	8: (kore_Lbl'-LT-'generatedTop'-GT-' · phi0)
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'>
	7: phi1
	8: (kore_Lbl'-LT-'generatedTop'-GT-' · phi0)
	9: phi1
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'>
	7: phi1
	8: ((kore_Lbl'-LT-'generatedTop'-GT-' · phi0) · phi1)
Instantiate 0, 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	7: phi0
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	7: phi0
	8: phi1
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	7: phi0
	8: phi1
	9: phi0
MetaVar 2
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	7: phi0
	8: phi1
	9: phi0
	10: phi2
Symbol kore_next
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	7: phi0
	8: phi1
	9: phi0
	10: phi2
	11: kore_next
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	7: phi0
	8: phi1
	9: phi0
	10: phi2
	11: kore_next
	12: phi1
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	7: phi0
	8: phi1
	9: phi0
	10: phi2
	11: (kore_next · phi1)
Instantiate 0, 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	7: phi0
	8: phi1
	9: ♦phi2
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	7: phi0
	8: phi1
	9: ♦phi2
	10: phi0
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	7: phi0
	8: phi1
	9: ♦phi2
	10: phi0
	11: phi0
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	7: phi0
	8: phi1
	9: ♦phi2
	10: phi0
	11: phi0
	12: phi1
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	7: phi0
	8: phi1
	9: ♦phi2
	10: phi0
	11: phi0
	12: phi1
	13: phi1
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	7: phi0
	8: phi1
	9: ♦phi2
	10: phi0
	11: phi0
	12: phi1
	13: phi1
	14: phi0
SVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	7: phi0
	8: phi1
	9: ♦phi2
	10: phi0
	11: phi0
	12: phi1
	13: phi1
	14: phi0
	15: X0
Mu 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	7: phi0
	8: phi1
	9: ♦phi2
	10: phi0
	11: phi0
	12: phi1
	13: phi1
	14: phi0
	15: (μ X0 . X0)
Instantiate 
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	7: phi0
	8: phi1
	9: ♦phi2
	10: phi0
	11: phi0
	12: phi1
	13: phi1
	14: phi0
	15: ⊥
Implies
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	7: phi0
	8: phi1
	9: ♦phi2
	10: phi0
	11: phi0
	12: phi1
	13: phi1
	14: (phi0 -> ⊥)
Instantiate 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	7: phi0
	8: phi1
	9: ♦phi2
	10: phi0
	11: phi0
	12: phi1
	13: ¬phi1
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	7: phi0
	8: phi1
	9: ♦phi2
	10: phi0
	11: phi0
	12: phi1
	13: ¬phi1
	14: phi0
Symbol inhabitant
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	7: phi0
	8: phi1
	9: ♦phi2
	10: phi0
	11: phi0
	12: phi1
	13: ¬phi1
	14: phi0
	15: inhabitant
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	7: phi0
	8: phi1
	9: ♦phi2
	10: phi0
	11: phi0
	12: phi1
	13: ¬phi1
	14: phi0
	15: inhabitant
	16: phi0
App
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	7: phi0
	8: phi1
	9: ♦phi2
	10: phi0
	11: phi0
	12: phi1
	13: ¬phi1
	14: phi0
	15: (inhabitant · phi0)
Instantiate 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	7: phi0
	8: phi1
	9: ♦phi2
	10: phi0
	11: phi0
	12: phi1
	13: ¬phi1
	14: k⊤:phi0
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	7: phi0
	8: phi1
	9: ♦phi2
	10: phi0
	11: phi0
	12: phi1
	13: ¬phi1
	14: k⊤:phi0
	15: phi0
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	7: phi0
	8: phi1
	9: ♦phi2
	10: phi0
	11: phi0
	12: phi1
	13: ¬phi1
	14: k⊤:phi0
	15: phi0
	16: phi1
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	7: phi0
	8: phi1
	9: ♦phi2
	10: phi0
	11: phi0
	12: phi1
	13: ¬phi1
	14: k⊤:phi0
	15: phi0
	16: phi1
	17: phi0
SVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	7: phi0
	8: phi1
	9: ♦phi2
	10: phi0
	11: phi0
	12: phi1
	13: ¬phi1
	14: k⊤:phi0
	15: phi0
	16: phi1
	17: phi0
	18: X0
Mu 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	7: phi0
	8: phi1
	9: ♦phi2
	10: phi0
	11: phi0
	12: phi1
	13: ¬phi1
	14: k⊤:phi0
	15: phi0
	16: phi1
	17: phi0
	18: (μ X0 . X0)
Instantiate 
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	7: phi0
	8: phi1
	9: ♦phi2
	10: phi0
	11: phi0
	12: phi1
	13: ¬phi1
	14: k⊤:phi0
	15: phi0
	16: phi1
	17: phi0
	18: ⊥
Implies
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	7: phi0
	8: phi1
	9: ♦phi2
	10: phi0
	11: phi0
	12: phi1
	13: ¬phi1
	14: k⊤:phi0
	15: phi0
	16: phi1
	17: (phi0 -> ⊥)
Instantiate 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	7: phi0
	8: phi1
	9: ♦phi2
	10: phi0
	11: phi0
	12: phi1
	13: ¬phi1
	14: k⊤:phi0
	15: phi0
	16: ¬phi1
Implies
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	7: phi0
	8: phi1
	9: ♦phi2
	10: phi0
	11: phi0
	12: phi1
	13: ¬phi1
	14: k⊤:phi0
	15: (phi0 -> ¬phi1)
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	7: phi0
	8: phi1
	9: ♦phi2
	10: phi0
	11: phi0
	12: phi1
	13: ¬phi1
	14: k⊤:phi0
	15: (phi0 -> ¬phi1)
	16: phi0
SVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	7: phi0
	8: phi1
	9: ♦phi2
	10: phi0
	11: phi0
	12: phi1
	13: ¬phi1
	14: k⊤:phi0
	15: (phi0 -> ¬phi1)
	16: phi0
	17: X0
Mu 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	7: phi0
	8: phi1
	9: ♦phi2
	10: phi0
	11: phi0
	12: phi1
	13: ¬phi1
	14: k⊤:phi0
	15: (phi0 -> ¬phi1)
	16: phi0
	17: (μ X0 . X0)
Instantiate 
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	7: phi0
	8: phi1
	9: ♦phi2
	10: phi0
	11: phi0
	12: phi1
	13: ¬phi1
	14: k⊤:phi0
	15: (phi0 -> ¬phi1)
	16: phi0
	17: ⊥
Implies
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	7: phi0
	8: phi1
	9: ♦phi2
	10: phi0
	11: phi0
	12: phi1
	13: ¬phi1
	14: k⊤:phi0
	15: (phi0 -> ¬phi1)
	16: (phi0 -> ⊥)
Instantiate 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	7: phi0
	8: phi1
	9: ♦phi2
	10: phi0
	11: phi0
	12: phi1
	13: ¬phi1
	14: k⊤:phi0
	15: ¬(phi0 -> ¬phi1)
Instantiate 0, 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	7: phi0
	8: phi1
	9: ♦phi2
	10: phi0
	11: phi0
	12: phi1
	13: (¬phi1 ⋀ k⊤:phi0)
Instantiate 0, 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	7: phi0
	8: phi1
	9: ♦phi2
	10: phi0
	11: (k¬phi1):phi0
MetaVar 2
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	7: phi0
	8: phi1
	9: ♦phi2
	10: phi0
	11: (k¬phi1):phi0
	12: phi2
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	7: phi0
	8: phi1
	9: ♦phi2
	10: phi0
	11: (k¬phi1):phi0
	12: phi2
	13: phi1
MetaVar 2
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	7: phi0
	8: phi1
	9: ♦phi2
	10: phi0
	11: (k¬phi1):phi0
	12: phi2
	13: phi1
	14: phi2
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	7: phi0
	8: phi1
	9: ♦phi2
	10: phi0
	11: (k¬phi1):phi0
	12: phi2
	13: phi1
	14: phi2
	15: phi0
MetaVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	7: phi0
	8: phi1
	9: ♦phi2
	10: phi0
	11: (k¬phi1):phi0
	12: phi2
	13: phi1
	14: phi2
	15: phi0
	16: phi0
SVar 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	7: phi0
	8: phi1
	9: ♦phi2
	10: phi0
	11: (k¬phi1):phi0
	12: phi2
	13: phi1
	14: phi2
	15: phi0
	16: phi0
	17: X0
Mu 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	7: phi0
	8: phi1
	9: ♦phi2
	10: phi0
	11: (k¬phi1):phi0
	12: phi2
	13: phi1
	14: phi2
	15: phi0
	16: phi0
	17: (μ X0 . X0)
Instantiate 
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	7: phi0
	8: phi1
	9: ♦phi2
	10: phi0
	11: (k¬phi1):phi0
	12: phi2
	13: phi1
	14: phi2
	15: phi0
	16: phi0
	17: ⊥
Implies
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	7: phi0
	8: phi1
	9: ♦phi2
	10: phi0
	11: (k¬phi1):phi0
	12: phi2
	13: phi1
	14: phi2
	15: phi0
	16: (phi0 -> ⊥)
Instantiate 0
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	7: phi0
	8: phi1
	9: ♦phi2
	10: phi0
	11: (k¬phi1):phi0
	12: phi2
	13: phi1
	14: phi2
	15: ¬phi0
MetaVar 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	7: phi0
	8: phi1
	9: ♦phi2
	10: phi0
	11: (k¬phi1):phi0
	12: phi2
	13: phi1
	14: phi2
	15: ¬phi0
	16: phi1
Implies
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	7: phi0
	8: phi1
	9: ♦phi2
	10: phi0
	11: (k¬phi1):phi0
	12: phi2
	13: phi1
	14: phi2
	15: (¬phi0 -> phi1)
Instantiate 0, 1
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	7: phi0
	8: phi1
	9: ♦phi2
	10: phi0
	11: (k¬phi1):phi0
	12: phi2
	13: (phi1 ⋁ phi2)
Instantiate 0, 1, 2
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	7: phi0
	8: phi1
	9: ♦phi2
	10: ((k¬phi1):phi0 k⋁ phi2)
Instantiate 0, 1, 2
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: ksort_SortGeneratedTopCell
	5: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	6: <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>
	7: (phi1 k-> ♦phi2):phi0
Instantiate 0, 1, 2
	Stack:
	0: ((∃ x0 . (phi0 = x0)) -> ((phi0 -> (μ X0 . X0)[{}])[{0: "(∃ x1 . (phi0 -> (μ X0 . X0)[{}])[{0: 'phi0'}])"}][{0: 'phi1'}] -> phi1[phi0/x1]))
	1: ⌈ x0 ⌉
	2: functional(<kore_Lbl'-LT-'generatedCounter'-GT-'> dv(0):ksort_SortInt </kore_Lbl'-LT-'generatedCounter'-GT-'>)
	3: functional(kore_dotk())
	4: (<kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooA'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'> k=> <kore_Lbl'-LT-'generatedTop'-GT-'> <kore_Lbl'-LT-'k'-GT-'> (kore_inj(ksort_SortFoo, ksort_SortKItem, kore_LblFooB'LParRParUnds'SINGLE-REWRITE-SYNTAX'Unds'Foo()) ~> phi0) </kore_Lbl'-LT-'k'-GT-'> phi1 </kore_Lbl'-LT-'generatedTop'-GT-'>):ksort_SortGeneratedTopCell
Publish
