; f :: [stack] -> [memory] -> [claims] -> [instruction]
;   -> ([stack] -> [memory] -> [claims])
; buffer :: [instruction]
;; map :: f -> [stack] -> [memory] -> [claims] -> [instruction]
;     -> ([stack] -> [memory] -> [claims] -> [instruction])
!(defrec map (lambda (f stack memory claims buffer)
                (if (eq buffer nil)
                    (cons stack (cons memory (cons claims (cons buffer nil))))
                    (let ((result (f stack memory claims buffer)))
                         (map f (car result) (car (cdr result)) (car (cdr (cdr result)))  (car (cdr (cdr (cdr result)))))))))


;; This function is used to get the value of a key in a pattern.
;; get:: key -> [a] -> value
!(defrec get (lambda (key pattern)
                (if pattern
                    (if (eq key (car pattern))
                        (car (cdr pattern))
                        (get key (cdr pattern)))
                    nil)))

;; This function is used to check if a list contains an element
;; contains :: ele -> [a] -> bool
!(defrec contains (lambda (ele list)
                     (if list
                         (if (eq ele (car list))
                             t
                             (contains ele (cdr list)))
                         nil)))

;; This function is used to check if list2 contains any element in list1
!(defrec containsElement
    (lambda (list1 list2)
       (if list1
           (if (contains (car list1) list2)
               t
               (containsElement (cdr list1) list2))
           nil)))

;; logical and
!(def and (lambda (cond1 cond2)
             (if cond1
                 cond2
                 nil)))

;; logical or
!(def or (lambda (cond1 cond2)
            (if cond1
                t
                cond2)))

;; logical not
!(def not (lambda (cond)
             (if cond
                 nil
                 t)))

;; nth :: int -> [a] -> a
!(defrec nth (lambda (n list)
            (if (eq n 0)
                (car list)
                (nth (- n 1) (cdr list)))))

;; length :: [a] -> int
!(defrec length (lambda (list)
                   (if list
                       (+ 1 (length (cdr list)))
                       0)))

;; cons in the reverse order
;; append :: (a, [a]) -> [a]
!(defrec append
   (lambda (elem list)
      (if (eq list nil)
         (cons elem nil)
         (cons (car list) (append elem (cdr list)))
      )
   )
)
