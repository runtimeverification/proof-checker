!(load "pattern_impl.lurk")
!(load "term.lurk")
!(load "data_structures.lurk")
!(load "instantiate_in_place.lurk")

;; Auxiliar functions
!(defrec loop_to_ids_plugs
   (lambda (n instructions stack ids plugs)
      (if (= n 0)
         (cons stack (cons instructions (cons ids (cons plugs nil))))
         (let ((id (car instructions))
               (instructions (cdr instructions))
               (temp (pop_stack_pattern stack))
               (pattern (car temp))
               (stack (cdr temp))
               )
               (loop_to_ids_plugs (- n 1) instructions stack (append id ids) (append pattern plugs))
         )
      )
   )
)


;; ExecutionPhase
!(def Gamma_phase 0)
!(def Claim_phase 1)
!(def Proof_phase 2)

;; Definition: read_u8_vec_aux(buffer, size) = (vec, buffer')
;; Use: (read_u8_vec_aux '(3 2 1 0) 2) => ((3 2) (1 0)
!(defrec read_u8_vec_aux
   (lambda (buffer size)
           (if (eq buffer nil)
               nil
               (if (= size 0)
                   (cons nil (cons buffer nil))
                   (let ((ret (read_u8_vec_aux (cdr buffer) (- size 1))))
                        (cons
                           (cons (car buffer) (car ret))
                           (cdr ret)))))))

;; Definition: read_u8_vec(buffer) = (vec, buffer')
;; Use: (read_u8_vec '(2 3 2 1 0)) => ((3 2) (1 0))
!(def read_u8_vec (lambda (buffer) (read_u8_vec_aux (cdr buffer) (car buffer))))

;; execute_instructions

;; Metavars
;; Phi0 = MetaVar(0)
;; Phi1 = MetaVar(1)
;; Phi2 = MetaVar(2)
!(def phi0 (metavar_unconstrained 0))
!(def phi1 (metavar_unconstrained 1))
!(def phi2 (metavar_unconstrained 2))

;; Axioms
;; Prop1: phi0 => (phi1 => phi0)
;; Prop2: (phi0 => (phi1 => phi2)) => ((phi0 => phi1) => (phi0 => phi2))
;; Prop3: ((~(~phi0)) => phi0)
!(def prop1 (implies phi0 (implies phi1 phi0)))
!(def prop2 (implies (implies phi0 (implies phi1 phi2))
                     (implies (implies phi0 phi1)
                              (implies phi0 phi2))))
!(def prop3 (implies (negate (negate phi0)) phi0))

;; Quantifier: forall x. phi0
!(def quantifier (implies (esubst phi0 0 (evar 1)) (exists 0 phi0)))

;; Existence: exists x. phi0
!(def existence (exists 0 phi0))

;; Definition: switch_case(phase, stack, memory, claims, instructions) = (stack', memory', claims', instructions')
;; Use: (switch_case phase stack memory claims instructions)
;; Ex: (switch_case '(1) '(1) '(1) '(2 3 5 7))
!(def switch_case
   (lambda (phase stack memory claims instructions)
      (let ((instr_u32 (car instructions))
            (instructions (cdr instructions)))
         (if (= instr_u32 2) ; Evar
            (let ((id (car instructions))
                  (instructions (cdr instructions)))
                  (cons (cons (Pattern_ (evar id)) stack) (cons memory (cons claims (cons instructions nil)))))
            (if (= instr_u32 3) ; Svar
               (let ((id (car instructions))
                     (instructions (cdr instructions)))
                     (cons (cons (Pattern_ (svar id)) stack) (cons memory (cons claims (cons instructions nil)))))
               (if (= instr_u32 4) ; Symbol
                  (let ((id (car instructions))
                        (instructions (cdr instructions)))
                        (if (eq id nil)
                           nil ;; Error
                           (cons (cons (Pattern_ (symbol id)) stack) (cons memory (cons claims (cons instructions nil))))
                        )
                  )
                  (if (= instr_u32 5) ; Implication
                     (let ((pop1 (pop_stack_pattern stack))
                           (right (car pop1))

                           (pop2 (pop_stack_pattern (cdr pop1)))
                           (left (car pop2))

                           (implication (implies left right))
                           )
                           (cons (cons (Pattern_ implication) (cdr pop2)) (cons memory (cons claims (cons instructions nil))))
                     )
                     (if (= instr_u32 6) ; Application
                        (let ((pop1 (pop_stack_pattern stack))
                              (right (car pop1))

                              (pop2 (pop_stack_pattern (cdr pop1)))
                              (left (car pop2))

                              (application (app left right))
                              )
                              (cons (cons (Pattern_ application) (cdr pop2)) (cons memory (cons claims (cons instructions nil))))
                        )
                           (if (= instr_u32 7) ; Mu
                              (let ((id (car instructions))
                                    (instructions (cdr instructions))
                                    (pop (pop_stack_pattern stack))
                                    (subpattern (car pop))
                                    (mu_pat (mu id subpattern)))

                                    (if (eq (pattern_well_formed mu_pat) nil)
                                        nil
                                        (cons (cons (Pattern_ mu_pat) (cdr pop)) (cons memory (cons claims (cons instructions nil))))))
                              (if (= instr_u32 8) ; Exists
                                 (let ((id (car instructions))
                                       (instructions (cdr instructions))
                                       (pop (pop_stack_pattern stack))
                                       (subpattern (car pop)))

                                       (cons (cons (Pattern_ (exists id subapttern)) (cdr pop)) (cons memory (cons claims (cons instructions nil)))))
                                 (if (= instr_u32 9) ; MetaVar
                                       (let ((id (car instructions))
                                             (instructions (cdr instructions)))
                                          (if (eq id nil)
                                             nil ;; Error
                                             (let ((e_fresh (car (read_u8_vec instructions)))
                                                   (instructions (cdr instructions))
                                                   (s_fresh (car (read_u8_vec instructions)))
                                                   (instructions (cdr instructions))
                                                   (positive (car (read_u8_vec instructions)))
                                                   (instructions (cdr instructions))
                                                   (negative (car (read_u8_vec instructions)))
                                                   (instructions (cdr instructions))
                                                   (app_ctx_holes (car (read_u8_vec instructions)))
                                                   (instructions (cdr instructions))

                                                   (metavar_pat (metavar id e_fresh s_fresh positive negative app_ctx_holes))
                                                   )

                                                   (if (eq (pattern_well_formed metavar_pat) nil)
                                                      nil ;; Error
                                                      (cons (cons (Pattern_ metavar_pat) stack) (cons memory (cons claims (cons instructions nil))))
                                                   )
                                             )
                                          ))
                                       (if (= instr_u32 10) ; ESubst
                                          (let ((evar_id (car instructions))
                                                (instructions (cdr instructions))
                                                (pop1 (pop_stack_pattern stack))
                                                (pattern (car pop1))
                                                (pattern_inst (get :inst pattern))

                                                (pop2 (pop_stack_pattern (cdr pop1)))
                                                (plug (car pop2)))

                                                (if (or (= pattern_inst 9)
                                                        (or (= pattern_inst 10)
                                                            (= pattern_inst 11)))
                                                    (let ((esubst_pat (esubst evar_id pattern plug)))
                                                          (if (pattern_well_formed esubst_pat)
                                                              (cons (cons (Pattern_ pattern) (cdr pop2)) (cons memory (cons claims (cons instructions nil))))
                                                              (cons (cons (Pattern_ esubst_pat) (cdr pop2)) (cons memory (cons claims (cons instructions nil))))))
                                                    nil))
                                          (if (= instr_u32 11) ; SSubst
                                             (let ((svar_id (car instructions))
                                                   (instructions (cdr instructions))
                                                   (pop1 (pop_stack_pattern stack))
                                                   (pattern (car pop1))
                                                   (pattern_inst (get :inst pattern))

                                                   (pop2 (pop_stack_pattern (cdr pop1)))
                                                   (plug (car pop2)))

                                                   (if (or (= pattern_inst 9)
                                                           (or (= pattern_inst 10)
                                                               (= pattern_inst 11)))
                                                       (let ((ssubst_pat (ssubst svar_id pattern plug)))
                                                             (if (eq (pattern_well_formed ssubst_pat) nil)
                                                                 (cons (cons (Pattern_ pattern) (cdr pop2)) (cons memory (cons claims (cons instructions nil))))
                                                                 (cons (cons (Pattern_ ssubst_pat) (cdr pop2)) (cons memory (cons claims (cons instructions nil))))))
                                                       nil))
                                             (if (= instr_u32 12) ; Prop1
                                                (cons (cons (Proved_ prop1) stack) (cons memory (cons claims (cons instructions nil))))
                                                (if (= instr_u32 13) ; Prop2
                                                   (cons (cons (Proved_ prop2) stack) (cons memory (cons claims (cons instructions nil))))
                                                   (if (= instr_u32 14) ; Prop3
                                                      (cons (cons (Proved_ prop3) stack) (cons memory (cons claims (cons instructions nil))))
                                                      (if (= instr_u32 15) ; Quantifier
                                                         (cons (cons (Proved_ quantifier) stack) (cons memory (cons claims (cons instructions nil))))
                                                         (if (= instr_u32 19) ; Existence
                                                            (cons (cons (Proved_ existence) stack) (cons memory (cons claims (cons instructions nil))))
                                                            (if (= instr_u32 21) ; ModusPonens
                                                               (let ((temp (pop_stack_proved stack))
                                                                     (premise2 (car temp))
                                                                     (stack (cdr temp))

                                                                     (temp (pop_stack_proved stack))
                                                                     (premise1 (car temp))
                                                                     (stack (cdr temp))
                                                                     )
                                                                     (if (not (= (get :inst premise1) 5))
                                                                        nil
                                                                        (if (not (eq (get :left premise1) premise2))
                                                                           nil
                                                                           (cons(cons (Proved_ (get :right premise1)) stack) (cons memory (cons claims (cons instructions nil))))
                                                                        )
                                                                     )
                                                               )
                                                               (if (= instr_u32 22) ; Generalization
                                                                  (let ((pop (pop_stack_proved stack))
                                                                        (pattern (car pop))
                                                                        (pattern_inst (get :inst pattern)))

                                                                        (if (= pattern_inst 5)
                                                                            (let ((left (get :left pattern))
                                                                                  (right (get :right pattern))

                                                                                  (evar_id (car instructions))
                                                                                  (instructions (cdr instructions)))

                                                                                  (if (eq (pattern_e_fresh evar_id right) nil)
                                                                                      nil
                                                                                      (cons (cons (Proved_ (implies (exists evar_id left) right)) (cdr pop)) (cons memory (cons claims (cons instructions nil))))))
                                                                            nil))
                                                                  (if (= instr_u32 24) ; Substitution
                                                                      (let ((svar_id (car instructions))
                                                                            (instructions (cdr instructions))
                                                                            (pop1 (pop_stack_pattern stack))
                                                                            (plug (car pop1))

                                                                            (pop2 (pop_stack_proved (cdr pop1)))
                                                                            (pattern (car pop2))
                                                                            (pattern_inst (get :inst pattern)))
                                                                           (if (or (= pattern_inst 9)
                                                                                   (or (= pattern_inst 10)
                                                                                       (= pattern_inst 11)))
                                                                               (let ((ssubst_pat (ssubst svar_id pattern plug)))
                                                                                    (if (eq (pattern_well_formed ssubst_pat) nil)
                                                                                        (cons (cons (Proved_ pattern) (cdr pop2)) (cons memory (cons claims (cons instructions nil))))
                                                                                        (cons (cons (Proved_ ssubst_pat) (cdr pop2)) (cons memory (cons claims (cons instructions nil))))))
                                                                               nil))
                                                                      (if (= instr_u32 26) ; Instantiate
                                                                          (let ((n (car instructions))
                                                                                (instructions (cdr instructions))
                                                                                (ids nil)
                                                                                (plugs nil)

                                                                                (metaterm (car stack))
                                                                                (metaterm_pattern (car (cdr metaterm))) ;(get :pattern metaterm)
                                                                                (metaterm_type (car metaterm)) ;(get :type metaterm)
                                                                                (stack (cdr stack))

                                                                                (temp (loop_to_ids_plugs n instructions stack ids plugs))
                                                                                (stack (car temp))
                                                                                (instructions (car (cdr temp)))
                                                                                (ids (car (cdr (cdr temp))))
                                                                                (plugs (car (cdr (cdr (cdr temp)))))

                                                                                (metaterm (instantiate_internal metaterm_pattern ids plugs))
                                                                               )
                                                                               (if (eq metaterm_type 0)
                                                                                   (cons (cons (Pattern_ metaterm) stack) (cons memory (cons claims (cons instructions nil))))
                                                                                   (if (eq metaterm_type 1)
                                                                                       (cons (cons (Proved_ metaterm) stack) (cons memory (cons claims (cons instructions nil))))
                                                                                       nil ;; Error
                                                                                   )
                                                                               )
                                                                          )
                                                                          (if (= instr_u32 27) ; Pop only the first item
                                                                              (cons (cdr stack) (cons memory (cons claims (cons instructions nil))))
                                                                              (if (= instr_u32 28) ; Save
                                                                                  (let ((term (car stack)))
                                                                                       (cons stack (cons (append term memory) (cons claims (cons instructions nil)))))
                                                                                  (if (= instr_u32 29) ; Load
                                                                                      (let ((index (car instructions))
                                                                                            (instructions (cdr instructions)))
                                                                                           (if (eq index nil)
                                                                                               nil ;; Error
                                                                                               (let ((term (nth index memory)))
                                                                                                    (if (eq term nil)
                                                                                                        nil ;; Error
                                                                                                        (cons (cons term stack) (cons memory (cons claims (cons instructions nil))))
                                                                                                    )
                                                                                               )
                                                                                           )
                                                                                      )
                                                                                      (if (= instr_u32 30) ; Publish
                                                                                          (if (eq phase 0)
                                                                                              (let ((temp (pop_stack_pattern stack))
                                                                                                    (pattern (car temp))
                                                                                                    (stack (cdr temp))
                                                                                                   )
                                                                                                   (cons stack (cons (append (Proved_ pattern) memory) (cons claims (cons instructions nil))))
                                                                                              )
                                                                                              (if (eq phase 1)
                                                                                                  (let ((temp (pop_stack_pattern stack))
                                                                                                        (pattern (car temp))
                                                                                                        (stack (cdr temp))
                                                                                                       )
                                                                                                       (cons stack (cons memory (cons (cons pattern claims) (cons instructions nil))))
                                                                                                  )
                                                                                                  (if (eq phase 2)
                                                                                                      (let ((pattern (car claims))
                                                                                                            (claims (cdr claims))
                                                                                                           )
                                                                                                           (if (eq pattern nil)
                                                                                                               nil ;; Error
                                                                                                               (let ((temp (pop_stack_proved stack)) ; TODO: Should we add a check to see if the stack is empty?
                                                                                                                     (theorem (car temp))
                                                                                                                     (stack (cdr temp))
                                                                                                                    )
                                                                                                                    (if (eq pattern theorem)
                                                                                                                        (cons stack (cons memory (cons claims (cons instructions nil))))
                                                                                                                        nil ;; Error
                                                                                                                    )
                                                                                                               )
                                                                                                           )
                                                                                                      )
                                                                                                  )
                                                                                              )
                                                                                          )
                                                                                          (if (= instr_u32 137) ; CleanMetaVar
                                                                                              (let ((id (car instructions))
                                                                                                    (instructions (cdr instructions)))
                                                                                                   (if (eq id nil)
                                                                                                       nil ;; Error
                                                                                                       (cons (cons (Pattern_ (metavar_unconstrained id)) stack) (cons memory (cons claims (cons instructions nil))))

                                                                                                   )
                                                                                              )
                                                                                              nil
                                                                                          )))))))))))))))))))))))))))

;; Definition: execute_instructions(buffer, stack, memory, claims, phase) = (stack', memory', claims', instructions')
!(def execute_instructions (lambda (buffer stack memory claims phase)
   (map (switch_case phase) stack memory claims buffer)))

;; Definition: verify(gamma_buffer, claims_buffer, proof_buffer) = bool
!(def verify (lambda (gamma_buffer claims_buffer proof_buffer)
   (let ((stack Stack)
         (memory Memory)
         (claims Claims)
         (gamma (execute_instructions gamma_buffer stack memory claims Gamma_phase))
         (memory (car (cdr gamma)))
         (claim (execute_instructions claims_buffer stack memory claims Claim_phase))
         (memory (car (cdr claim)))
         (claims (car (cdr (cdr claim))))
         (proof (execute_instructions proof_buffer stack memory claims Proof_phase))
        )
        (if (eq (car (cdr (cdr proof))) nil)
           t
           nil
        )
   )
))
