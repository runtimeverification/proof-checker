
!(load "basic_operations.lurk")

;; Lurk's Pattern definition
!(def Pattern '(
  ;; Ints
  :inst 0               ; All
  :id 0                 ; EVar, SVar, Symbol, Mu, Exists, MetaVar
                        ; ESubst (evar_id), SSubst (svar_id)
  ;; IdLists
  :e_fresh nil          ; MetaVar
  :s_fresh nil          ; MetaVar
  :positive nil         ; MetaVar
  :negative nil         ; MetaVar
  :app_ctx_holes nil    ; MetaVar
  
  ;; Patterns
  :left nil             ; Implication, Application   
  :right nil            ; Implication, Application
  :subpattern nil       ; Exists, Mu, ESubst (pattern), SSubst (pattern)
  :plug nil             ; ESubst, SSubst
  )
)

;; Definition: evar(evar_id) = Pattern{inst = 2, id = evar_id}
;; Use: !(def new_evar (evar evar_id))
!(def evar 
    (lambda (evar_id) 
        (set :inst 2 
        (set :id evar_id Pattern)
        )
    )
)

;; Definition: svar(svar_id) = Pattern{inst = 3, id = svar_id}
;; Use: !(def new_svar (svar svar_id))
!(def svar 
    (lambda (svar_id) 
        (set :inst 3 
        (set :id svar_id Pattern)
        )
    )
)

;; Definition: symbol(symbol_id) = Pattern{inst = 4, id = symbol_id}
;; Use: !(def new_symbol (symbol symbol_id))
!(def symbol 
    (lambda (symbol_id) 
        (set :inst 4 
        (set :id symbol_id Pattern)
        )
    )
)

;; Definition: implies(p1, p2) = Pattern{inst = 5, left = p1, right = p2}
;; Use: !(def new_implies (implies p1 p2))
!(def implies 
    (lambda (p1 p2) 
        (set :inst 5 
        (set :left p1 
        (set :right p2 Pattern)
        ))
    )
)

;; Definition: app(p1, p2) = Pattern{inst = 6, left = p1, right = p2}
;; Use: !(def new_app (app p1 p2))
!(def app 
    (lambda (p1 p2) 
        (set :inst 6 
        (set :left p1 
        (set :right p2 Pattern)
        ))
    )
)

;; Definition: mu(var, subpattern) = Pattern{inst = 7, id = var, subpattern = subpattern}
;; Use: !(def new_mu (mu var subpattern))
!(def mu 
    (lambda (var subpattern) 
        (set :inst 7 
        (set :id var 
        (set :subpattern subpattern Pattern)
        ))
    )
)

;; Definition: exists(var, subpattern) = Pattern{inst = 8, id = var, subpattern = subpattern}
;; Use: !(def new_exists (exists var subpattern))
!(def exists 
    (lambda (var subpattern) 
        (set :inst 8 
        (set :id var 
        (set :subpattern subpattern Pattern)
        ))
    )
)

;; Definition: metavar_unconstrained(new_id) = Pattern{inst = 9, id = new_id}
;; Use: !(def new_metavar_unconstrained (metavar_unconstrained new_id))
!(def metavar_unconstrained 
    (lambda (new_id) 
        (set :inst 9 
        (set :id new_id Pattern)
        )
    )
)

;; Definition: metavar(new_id, e_fresh, s_fresh, positive, negative, app_ctx_holes) = Pattern{inst = 10, id = new_id, e_fresh = e_fresh, s_fresh = s_fresh, positive = positive, negative = negative, app_ctx_holes = app_ctx_holes}
;; Use: !(def new_metavar (metavar new_id e_fresh s_fresh positive negative app_ctx_holes))
!(def metavar 
    (lambda (new_id e_fresh s_fresh positive negative app_ctx_holes) 
        (set :inst 9 
        (set :id new_id 
        (set :e_fresh e_fresh 
        (set :s_fresh s_fresh 
        (set :positive positive 
        (set :negative negative 
        (set :app_ctx_holes app_ctx_holes Pattern)
        ))))))
    )
)

;; Definition: metavar_s_fresh(new_id, s_fresh, positive, negative) = Pattern{inst = 11, id = new_id, s_fresh = (s_fresh nil), positive = positive, negative = negative}
;; Use: !(def new_metavar_s_fresh (metavar_s_fresh new_id s_fresh positive negative))
!(def metavar_s_fresh 
    (lambda (new_id s_fresh positive negative) 
        (set :inst 9 
        (set :id new_id 
        (set :s_fresh (cons s_fresh nil) 
        (set :positive positive 
        (set :negative negative Pattern)
        ))))
    )
)

;; Definition: esubst(evar_id, subpattern, plug) = Pattern{inst = 10, id = evar_id, subpattern = subpattern, plug = plug}
;; Use: !(def new_esubst (esubst evar_id subpattern plug))
!(def esubst 
    (lambda (evar_id subpattern plug) 
        (set :inst 10
        (set :id evar_id 
        (set :subpattern subpattern 
        (set :plug plug Pattern)
        )))
    )
)

;; Definition: ssubst(svar_id, subpattern, plug) = Pattern{inst = 11, id = svar_id, subpattern = subpattern, plug = plug}
;; Use: !(def new_ssubst (ssubst svar_id subpattern plug))
!(def ssubst 
    (lambda (svar_id subpattern plug) 
        (set :inst 11
        (set :id svar_id 
        (set :subpattern subpattern 
        (set :plug plug Pattern)
        )))
    )
)