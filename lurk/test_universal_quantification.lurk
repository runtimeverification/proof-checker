!(load "lib.lurk")

!(def proof '(22 0))
!(def stack (cons (cons 1 (cons (implies (symbol 0) (symbol 1)) nil)) nil))
!(def memory nil)
!(def claims nil)

!(def result (execute_instructions proof stack memory claims Proof_phase))

 !(assert (eq (car result)
              (cons (cons 1 (cons (implies (exists 0 (symbol 0)) (symbol 1)) nil)) nil))) ;; assert_eq!(stack, vec![Term::Proved(implies(exists(0, symbol(0)), symbol(1)))]);
!(assert (eq (car (cdr result)) nil))                                                     ;; assert_eq!(memory, vec![]);
!(assert (eq (car (cdr (cdr result))) nil))                                               ;; assert_eq!(claims, vec![]);
