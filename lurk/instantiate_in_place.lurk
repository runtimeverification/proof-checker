!(defrec check_plugs_pos (lambda (check p idList)
    (if (eq idList nil)
        nil
        (if (not(check (car idList) p))
            t
            (check_plugs_pos check p (cdr idList))
        ))))

!(def is_e_fresh? (lambda (evar pattern) (pattern_e_fresh evar pattern)))
!(def is_s_fresh? (lambda (svar pattern) (pattern_s_fresh svar pattern)))
!(def is_positive? (lambda (svar pattern) (pattern_positive svar pattern)))
!(def is_negative? (lambda (svar pattern) (pattern_negative svar pattern)))

!(defrec for_it_vars_checks (lambda (vars plugs pos p)
    (if (eq vars nil)
        nil
        (let ((plugs_pos (nth pos plugs)))
             (if (eq (car vars) (get :id p))
                 (if (check_plugs_pos is_e_fresh? plugs_pos (get :e_fresh p))
                    nil
                    (if (check_plugs_pos is_s_fresh? plugs_pos (get :s_fresh p))
                        nil
                        (if (check_plugs_pos is_positive? plugs_pos (get :positive p))
                            nil
                            (if (check_plugs_pos is_negative? plugs_pos (get :negative p))
                                nil
                                (if (>= pos (length plugs))
                                    nil
                                    plugs_pos
                                ))))
                 )
                 (for_it_vars_checks (cdr vars) plugs (+ pos 1) p))
        ))))

!(defrec apply_esubst (lambda (pattern evar_id plug)
    (let ((wrap_subst (esubst evar_id pattern plug))
          (inst (get :inst pattern)))
         (if (= inst 2) ; Evar
             (if (= evar_id (get :id pattern))
                 plug
                 pattern)
             (if (= inst 5) ; Implies
                 (implies (apply_esubst (get :left pattern) evar_id plug)
                          (apply_esubst (get :right pattern) evar_id plug))
                 (if (= inst 6) ; App
                     (app (apply_esubst (get :left pattern) evar_id plug)
                          (apply_esubst (get :right pattern) evar_id plug))
                     (if (= inst 7) ; Mu
                         (mu (get :id pattern) (apply_esubst (get :subpattern pattern) evar_id plug))
                         (if (= inst 8) ; Exists
                             (if (= evar_id (get :id pattern))
                                 pattern
                                 (exists (get :id pattern) (apply_esubst (get :subpattern pattern) evar_id plug)))
                             (if (= inst 9) ; MetaVar
                                 wrap_subst
                                 (if (= inst 10) ; ESubst
                                     wrap_subst
                                     (if (= inst 11) ; SSubst
                                         wrap_subst
                                         pattern)))))))))))

!(defrec apply_ssubst (lambda (pattern svar_id plug)
    (let ((wrap_subst (ssubst svar_id pattern plug))
          (inst (get :inst pattern)))
         (if (= inst 3) ; Svar
             (if (= svar_id (get :id pattern))
                 plug
                 pattern)
             (if (= inst 5) ; Implies
                 (implies (apply_ssubst (get :left pattern) svar_id plug)
                          (apply_ssubst (get :right pattern) svar_id plug))
                 (if (= inst 6) ; App
                     (app (apply_ssubst (get :left pattern) svar_id plug)
                          (apply_ssubst (get :right pattern) svar_id plug))
                     (if (= inst 7) ; Mu
                         (if (= svar_id (get :id pattern))
                             pattern
                             (mu (get :id pattern) (apply_ssubst (get :subpattern pattern) svar_id plug)))
                         (if (= inst 8) ; Exists
                             (exists (get :id pattern) (apply_ssubst (get :subpattern pattern) svar_id plug))
                             (if (= inst 9) ; MetaVar
                                 wrap_subst
                                 (if (= inst 10) ; ESubst
                                     wrap_subst
                                     (if (= inst 11) ; SSubst
                                         wrap_subst
                                         pattern)))))))))))


!(defrec instantiate_internal (lambda (p vars plugs)
    (let ((inst (get :inst p)))
        (if (= inst 2) ; Evar
            nil
            (if (= inst 3) ; SVar
                nil
                (if (= inst 4) ; Symbol
                    nil
                    (if (= inst 9) ; MetaVar
                        (for_it_vars_checks vars plugs 0 p)
                        (if (= inst 5) ; Implies
                            (let ((left (get :left p))
                                  (right (get :right p))

                                  (inst_left (instantiate_internal left vars plugs))
                                  (inst_right (instantiate_internal right vars plugs))
                                 )
                                 (if (and (eq inst_left nil) (eq inst_right nil))
                                    nil
                                    (if (eq inst_left nil)
                                        (implies left inst_right)
                                        (if (eq inst_right nil)
                                            (implies inst_left right)
                                            (implies inst_left inst_right)
                                        )
                                    )
                                 )
                            )
                            (if (= inst 6) ; App
                                (let ((left (get :left p))
                                      (right (get :right p))

                                      (inst_left (instantiate_internal left vars plugs))
                                      (inst_right (instantiate_internal right vars plugs))
                                     )
                                     (if (and (eq inst_left nil) (eq inst_right nil))
                                         nil
                                         (if (eq inst_left nil)
                                             (app left inst_right)
                                             (if (eq inst_right nil)
                                                 (app inst_left right)
                                                 (app inst_left inst_right)
                                             )
                                         )
                                     )
                                )
                                (if (= inst 7) ; Mu
                                    (let ((new_sub (instantiate_internal (get :subpattern p) vars plugs)))
                                         (if new_sub
                                             (mu (get :id p) new_sub)
                                             nil))
                                    (if (= inst 8) ; Exists
                                        (let ((new_sub (instantiate_internal (get :subpattern p) vars plugs)))
                                             (if new_sub
                                                 (exists (get :id p) new_sub)
                                                 nil))
                                        (if (= inst 10) ; ESubst
                                            (let ((p_id (get :id p))
                                                  (subpattern (get :subpattern p))
                                                  (plug (get :plug p))

                                                  (inst_subpattern (instantiate_internal subpattern vars plugs))
                                                  (inst_plug (instantiate_internal plug vars plugs))
                                                 )
                                                 (if (and (eq inst_subpattern nil) (eq inst_plug nil))
                                                     nil
                                                     (if (eq inst_subpattern nil)
                                                         (apply_esubst subpattern p_id inst_plug)
                                                         (if (eq inst_plug nil)
                                                             (apply_esubst inst_subpattern p_id plug)
                                                             (apply_esubst inst_subpattern p_id inst_plug)))))
                                            (if (= inst 11) ; SSubst
                                                (let ((p_id (get :id p))
                                                      (subpattern (get :subpattern p))
                                                      (plug (get :plug p))

                                                      (inst_subpattern (instantiate_internal subpattern vars plugs))
                                                      (inst_plug (instantiate_internal plug vars plugs))
                                                     )
                                                     (if (and (eq inst_subpattern nil) (eq inst_plug nil))
                                                         nil
                                                         (if (eq inst_subpattern nil)
                                                             (apply_ssubst subpattern p_id inst_plug)
                                                             (if (eq inst_plug nil)
                                                                 (apply_ssubst inst_subpattern p_id plug)
                                                                 (apply_ssubst inst_subpattern p_id inst_plug)))))
                                                nil)))))))))))))
