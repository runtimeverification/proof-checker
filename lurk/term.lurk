;; Pattern :: [0, pattern]
;; Proved  :: [1, pattern]

;; Definition: Pattern(pattern) = Term{type = 0, pattern = pattern}
;; Use: (Pattern_ '(1 2 3)) => (0 (1 2 3))
!(def Pattern_ 
   (lambda (pattern)
     (cons 0 (cons pattern nil))
   )
)

;; Definition: Proved(pattern) = Term{type = 1, pattern = pattern}
;; Use: (Proved_ '(1 2 3)) => (1 (1 2 3))
!(def Proved_ 
   (lambda (pattern)
      (cons 1 (cons pattern nil))
   )
)
