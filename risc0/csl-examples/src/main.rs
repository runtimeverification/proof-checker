// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use csl_examples::methods::{GUEST_CSL_ELF, GUEST_CSL_ID};

use risc0_zkvm::{default_executor_from_elf, serde::from_slice, ExecutorEnv};
use std::time::Instant;

fn main() {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    env_logger::init();

    let now = Instant::now();

    println!("Setting up env...");

    let env = ExecutorEnv::builder().build().unwrap();

    // Next, we make an executor, loading the (renamed) ELF binary.
    let mut exec = default_executor_from_elf(env, GUEST_CSL_ELF).unwrap();

    println!("Checking the proof...");

    // Run the executor to produce a session.
    let session = exec.run().unwrap();

    let runtime = now.elapsed().as_millis();

    println!("Ran in {} ms", runtime);

    println!("Generating the certificate...");

    // Prove the session to produce a receipt.
    let receipt = session.prove().unwrap();

    let provetime = now.elapsed().as_millis() - runtime;

    println!("Proved in {} ms", provetime);

    receipt.verify(GUEST_CSL_ID).unwrap();

    println!("Verified in {} ms", now.elapsed().as_millis() - provetime);

    // Get the host's size of a usize pointer
    let size_of_usize = std::mem::size_of::<usize>();

    // Small fetcher that returns the next chunk of given size from journal
    let current_index: usize = receipt.journal.len() - size_of_usize;
    let next_journal_chunk = |size: usize| -> &[u8] {
        let ret = &receipt.journal[current_index..current_index + size];
        return ret;
    };

    // Get the result of the execution
    let _ret: usize = from_slice(next_journal_chunk(size_of_usize)).unwrap();

    let total_cycles: usize = from_slice(next_journal_chunk(size_of_usize)).unwrap();
    println!("Total cycles {}", total_cycles);

    println!(
        "Running execution + ZK certficate generation + verification took {} ms",
        now.elapsed().as_millis()
    );
}
